@AbapCatalog.viewEnhancementCategory: [#NONE]
@AccessControl.authorizationCheck: #CHECK
@EndUserText.label: 'Travel CDS view - Unmanaged BO'
@Metadata.ignorePropagatedAnnotations: true
@ObjectModel.usageType:{
    serviceQuality: #X,
    sizeCategory: #S,
    dataClass: #MIXED
}
@Search.searchable: true

@Metadata.allowExtensions: true
define root view entity ZI_BKL_XX_U_TRAVEL as select from /dmo/travel as Travel
association[1] to ZI_BKL_XX_U_AGENCY as _Agency on
$projection.AgencyId = _Agency.AgencyId
association[1] to ZI_BKL_XX_U_CUSTOMER as _Customer on
$projection.CustomerId = _Customer.CustomerId
association[1] to I_Currency as _Currency on
$projection.CurrencyCode = _Currency.Currency
association[1..1] to /DMO/I_Travel_Status_VH as _TravelStatus
on $projection.Status = _TravelStatus.TravelStatus
{
    @Search.defaultSearchElement: true
    @ObjectModel.text.element: ['Description']
    key Travel.travel_id as TravelId,
    @Consumption.valueHelpDefinition: [{entity:{ name: 'ZI_BKL_XX_U_AGENCY', element: 'AgencyId'} }]
    @EndUserText.label: 'Agency'
    
    @Search.defaultSearchElement: true
    @ObjectModel.text.element: ['AgencyName']
    Travel.agency_id as AgencyId,
    
    _Agency.Name as AgencyName,
    
    @Consumption.valueHelpDefinition: [{entity:{ name: 'ZI_BKL_XX_U_CUSTOMER', element: 'CustomerId'} }]
    @EndUserText.label: 'Customer ID'
    @Search.defaultSearchElement: true
    @ObjectModel.text.element: ['CustomerName']
    Travel.customer_id as CustomerId,    
    
    concat(_Customer.FirstName, _Customer.LastName) as CustomerName,    
    Travel.begin_date as BeginDate,
    Travel.end_date as EndDate,
    @Semantics.amount.currencyCode: 'CurrencyCode'
    Travel.booking_fee as BookingFee,
    @Semantics.amount.currencyCode: 'CurrencyCode'
    Travel.total_price as TotalPrice,
    Travel.currency_code as CurrencyCode,
    Travel.description as Description,
    @Consumption.valueHelpDefinition: [{entity:{ name: '/DMO/I_Travel_Status_VH', element: 'TravelStatus'} }]
    @ObjectModel.text.element: ['TravelStatusText']
    Travel.status as Status,
    case status
        when 'N' then 3 --green 
        when 'B' then 2 --yellow
        when 'X' then 1 --red
        else 0
    end as Criticality,
    _TravelStatus._Text.Text as TravelStatusText,
    Travel.createdby as Createdby,
    Travel.createdat as Createdat,
    Travel.lastchangedby as Lastchangedby,
    Travel.lastchangedat as Lastchangedat,
    _Agency,
    _Customer,
    _Currency,
    _TravelStatus
}



@Metadata.layer: #CORE
@UI.headerInfo: { 
    typeName: 'Travel',
    typeNamePlural: 'Travels',
    title: { type: #STANDARD, value: 'Description' },
    description: { value: 'TravelId' }
}
@UI.presentationVariant: [{ 
    sortOrder: [{by: 'Lastchangedat', direction: #DESC }],
    visualizations: [{type: #AS_LINEITEM }]
}]
annotate view ZI_BKL_XX_U_TRAVEL
    with 
{   
    @UI.facet: [{
        purpose: #HEADER,
        type: #DATAPOINT_REFERENCE,
        position: 10,
        targetQualifier: 'PriceData'
    
     },{
        purpose: #HEADER,
        type: #DATAPOINT_REFERENCE,
        position: 20,
        targetQualifier: 'StatusData'
    
     },{ 
        label: 'General Information',
        id: 'GeneralInfo',
        type: #COLLECTION,
        position: 10
     },{ 
        label: 'More info',
        id: 'moreInfo',
        type: #IDENTIFICATION_REFERENCE,
        purpose: #STANDARD,
        parentId: 'GeneralInfo',
        position: 10
     },{ 
        label: 'Dates',
        id: 'dates',
        targetQualifier: 'dates',
        type: #FIELDGROUP_REFERENCE,
        purpose: #STANDARD,
        parentId: 'GeneralInfo',
        position: 20
     },{ 
        label: 'Price Data',
        id: 'priceData',
        targetQualifier: 'priceData',
        type: #FIELDGROUP_REFERENCE,
        purpose: #STANDARD,
        parentId: 'GeneralInfo',
        position: 30
     }]

    @UI.selectionField: [{position: 10 }]
    @UI.lineItem: [{position: 10 }]
    @UI.identification: [{position: 10 }]
    TravelId;
    @UI.selectionField: [{position: 20 }]
    @UI.lineItem: [{position: 20 }]
    @UI.identification: [{position: 20 }]
    AgencyId;
    @UI.selectionField: [{position: 30 }]
    @UI.lineItem: [{position: 30 }]
    @UI.identification: [{position: 30 }]
    CustomerId;
    @UI.lineItem: [{position: 40 }]
    @UI.fieldGroup: [{ qualifier: 'dates', position: 10 }]
    BeginDate;
    @UI.fieldGroup: [{ qualifier: 'dates', position: 20 }]
    EndDate;
    @UI.fieldGroup: [{ qualifier: 'priceData', position: 20 }]
    BookingFee;
    @UI.lineItem: [{position: 50 }]
    @UI.dataPoint:{ qualifier: 'PriceData', title: 'Price Data' }
    @UI.fieldGroup: [{ qualifier: 'priceData', position: 10 }]
    TotalPrice;
    @UI.lineItem: [{position: 60, importance: #HIGH, criticality: 'Criticality', 
    criticalityRepresentation: #WITH_ICON, type: #FOR_ACTION, dataAction: 'set_status_booked'
    , label : 'Book kardo' }]
    @UI.textArrangement: #TEXT_ONLY
    @UI.selectionField: [{position: 40 }]
    @UI.dataPoint: { qualifier: 'StatusData', title: 'Status' , criticality: 'Criticality'}
    Status;
    @UI.lineItem: [{position: 70 }]
    Lastchangedat;
    
    
}


@AbapCatalog.viewEnhancementCategory: [#NONE]
@AccessControl.authorizationCheck: #CHECK
@EndUserText.label: 'Customer Master data Unmanaged scenario'
@Metadata.ignorePropagatedAnnotations: true
@ObjectModel.usageType:{
    serviceQuality: #X,
    sizeCategory: #S,
    dataClass: #MIXED
}
define view entity ZI_BKL_XX_U_CUSTOMER as select from /dmo/customer as Customer 
association[1] to I_Country as _Country on
$projection.CountryCode = _Country.Country
{
    key Customer.customer_id as CustomerId,
    Customer.first_name as FirstName,
    Customer.last_name as LastName,
    Customer.title as Title,
    Customer.street as Street,
    Customer.postal_code as PostalCode,
    Customer.city as City,
    Customer.country_code as CountryCode,
    Customer.phone_number as PhoneNumber,
    Customer.email_address as EmailAddress,
    Customer.createdby as Createdby,
    Customer.createdat as Createdat,
    Customer.lastchangedby as Lastchangedby,
    Customer.lastchangedat as Lastchangedat,
    _Country
}



@AbapCatalog.viewEnhancementCategory: [#NONE]
@AccessControl.authorizationCheck: #CHECK
@EndUserText.label: 'Agency Master data'
@Metadata.ignorePropagatedAnnotations: true
@ObjectModel.usageType:{
    serviceQuality: #X,
    sizeCategory: #S,
    dataClass: #MIXED
}
define view entity ZI_BKL_XX_U_AGENCY as select from /dmo/agency as Agency 
association[1] to I_Country as _Country on
$projection.CountryCode = _Country.Country
{
    key agency_id as AgencyId,
    name as Name,
    street as Street,
    postal_code as PostalCode,
    city as City,
    country_code as CountryCode,
    phone_number as PhoneNumber,
    email_address as EmailAddress,
    web_address as WebAddress,
    _Country
}



CLASS zcl_bkl_xx_mission DEFINITION
  PUBLIC
  FINAL
  CREATE PUBLIC .

  PUBLIC SECTION.

    data: itab type table of string.
    INTERFACES if_oo_adt_classrun.
    METHODS reachtomars.
  PROTECTED SECTION.
  PRIVATE SECTION.
ENDCLASS.



CLASS zcl_bkl_xx_mission IMPLEMENTATION.

  METHOD reachtomars.
        data: lv_str type string.
        data(lo_earth) = new zcl_earth( ).
        data(lo_planet1) = new zcl_planet1( ).
        data(lo_mars) = new zcl_mars( ).
        "leave earth orbit
        lo_earth->leave_orbit( IMPORTING r_value = lv_str ).
        append lv_str to itab.
        "enter in planet 1
        lo_planet1->enter_orbit( IMPORTING r_value = lv_str ).
        append lv_str to itab.
        "leave plant1
        lo_planet1->leave_orbit( IMPORTING r_value = lv_str ).
        append lv_str to itab.
        "enter mars orbit
        lo_mars->enter_orbit( IMPORTING r_value = lv_str ).
        append lv_str to itab.
        "land on mars
        lo_mars->land( IMPORTING r_value = lv_str ).
        append lv_str to itab.
    ENDMETHOD.

  METHOD if_oo_adt_classrun~main.

        me->reachtomars( ).
        loop at itab into data(wa).
        out->write(
          EXPORTING
            data   = wa
*            name   =
*          RECEIVING
*            output =
        ).
        endloop.
  ENDMETHOD.
ENDCLASS.


unmanaged implementation in class zbp_i_bkl_xx_u_travel unique;
strict;

define behavior for ZI_BKL_XX_U_TRAVEL alias Travel

lock master
authorization master ( global )
etag master Lastchangedat
{

  field( mandatory ) AgencyId, CustomerId, BeginDate, EndDate;
  //field( readonly: update ) TravelId;
  action ( features : instance ) set_status_booked result [1] $self;

  create;
  update;
  delete;

  mapping for /dmo/travel control /dmo/s_travel_intx
  {
    TravelId = travel_id;
    BeginDate = begin_date;
    EndDate = end_date;
    CurrencyCode = currency_code;
    CustomerId = customer_id;
    Lastchangedat = lastchangedat;
    Description = description;
    Status = status;
    TotalPrice = total_price;
    BookingFee = booking_fee;
    AgencyId = agency_id;
  }

}


CLASS lhc_Travel DEFINITION INHERITING FROM cl_abap_behavior_handler.
  PRIVATE SECTION.

    TYPES tt_travel_failed    TYPE TABLE FOR FAILED   ZI_BKL_XX_U_TRAVEL.
    TYPES tt_travel_reported  TYPE TABLE FOR REPORTED ZI_BKL_XX_U_TRAVEL.

    METHODS get_global_authorizations FOR GLOBAL AUTHORIZATION
      IMPORTING REQUEST requested_authorizations FOR Travel RESULT result.

    METHODS create FOR MODIFY
      IMPORTING entities FOR CREATE Travel.

    METHODS update FOR MODIFY
      IMPORTING entities FOR UPDATE Travel.

    METHODS delete FOR MODIFY
      IMPORTING keys FOR DELETE Travel.

    METHODS read FOR READ
      IMPORTING keys FOR READ Travel RESULT result.

    METHODS lock FOR LOCK
      IMPORTING keys FOR LOCK Travel.
    METHODS get_instance_features FOR INSTANCE FEATURES
      IMPORTING keys REQUEST requested_features FOR Travel RESULT result.

    METHODS set_status_booked FOR MODIFY
      IMPORTING keys FOR ACTION Travel~set_status_booked RESULT result.

    METHODS map_messages
      IMPORTING
        cid          TYPE string         OPTIONAL
        travel_id    TYPE /dmo/travel_id OPTIONAL
        messages     TYPE /dmo/t_message
      EXPORTING
        failed_added TYPE abap_bool
      CHANGING
        failed       TYPE tt_travel_failed
        reported     TYPE tt_travel_reported.
ENDCLASS.

CLASS lhc_Travel IMPLEMENTATION.

  METHOD get_global_authorizations.
  ENDMETHOD.

  METHOD create.

    DATA: messages   TYPE /dmo/t_message,
              travel_in  TYPE /dmo/travel,
              travel_out TYPE /dmo/travel.

    "Receive all the data from Fiori UI in form of an internal table - entities
    LOOP AT entities ASSIGNING FIELD-SYMBOL(<travel_create>).

      "Map the fields from CDS structure to the wa which DB table compatible
      travel_in = CORRESPONDING #( <travel_create> MAPPING FROM ENTITY USING CONTROL ).

        "Pass the data to legacy code which insert data to buffer
      /dmo/cl_flight_legacy=>get_instance( )->create_travel( EXPORTING is_travel             =
                                                                    CORRESPONDING /dmo/s_travel_in( travel_in )
                                         IMPORTING es_travel             = travel_out
                                                   et_messages           = DATA(lt_messages) ).

      /dmo/cl_flight_legacy=>get_instance( )->convert_messages( EXPORTING it_messages = lt_messages
                                                                IMPORTING et_messages = messages ).

      map_messages(
          EXPORTING
            cid       = <travel_create>-%cid
            messages  = messages
          IMPORTING
            failed_added = DATA(failed_added)
          CHANGING
            failed    = failed-travel
            reported  = reported-travel
        ).

      IF failed_added = abap_false.
        INSERT VALUE #(
            %cid     = <travel_create>-%cid
            travelid = travel_out-travel_id )
          INTO TABLE mapped-travel.
      ENDIF.

    ENDLOOP.
  ENDMETHOD.

  METHOD update.
    DATA: messages TYPE /dmo/t_message,
          travel   TYPE /dmo/travel,
          travelx  TYPE /dmo/s_travel_inx. "refers to x structure (> BAPIs)

        LOOP AT entities ASSIGNING FIELD-SYMBOL(<travel_update>).

          travel = CORRESPONDING #( <travel_update> MAPPING FROM ENTITY ).

          travelx-travel_id = <travel_update>-TravelID.
          travelx-_intx     = CORRESPONDING #( <travel_update> MAPPING FROM ENTITY ).

          /dmo/cl_flight_legacy=>get_instance( )->update_travel(
            EXPORTING
              is_travel              = CORRESPONDING /dmo/s_travel_in( travel )
              is_travelx             = travelx
            IMPORTING
               et_messages            =  data(lt_messages)
          ).

          /dmo/cl_flight_legacy=>get_instance( )->convert_messages( EXPORTING it_messages = lt_messages
                                                            IMPORTING et_messages = messages ).


          map_messages(
              EXPORTING
                cid       = <travel_update>-%cid_ref
                travel_id = <travel_update>-travelid
                messages  = messages
              CHANGING
                failed    = failed-travel
                reported  = reported-travel
            ).

        ENDLOOP.
  ENDMETHOD.

  METHOD delete.

    DATA: messages TYPE /dmo/t_message.

    LOOP AT keys ASSIGNING FIELD-SYMBOL(<travel_delete>).

      /dmo/cl_flight_legacy=>get_instance( )->delete_travel(
        EXPORTING
          iv_travel_id = <travel_delete>-travelid
        IMPORTING
          et_messages  = data(lt_messages)
      ).

     /dmo/cl_flight_legacy=>get_instance( )->convert_messages( EXPORTING it_messages = lt_messages
                                                        IMPORTING et_messages = messages ).


      map_messages(
          EXPORTING
            cid       = <travel_delete>-%cid_ref
            travel_id = <travel_delete>-travelid
            messages  = messages
          CHANGING
            failed    = failed-travel
            reported  = reported-travel
        ).

    ENDLOOP.
  ENDMETHOD.

  METHOD read.

    DATA: travel_out TYPE /dmo/travel,
          messages   TYPE /dmo/t_message.

    LOOP AT keys ASSIGNING FIELD-SYMBOL(<travel_to_read>) GROUP BY <travel_to_read>-%tky.


        /dmo/cl_flight_legacy=>get_instance( )->get_travel( EXPORTING iv_travel_id          = <travel_to_read>-travelid
                                                                      iv_include_buffer     = ABAP_FALSE
                                                      IMPORTING es_travel             = travel_out
                                                                et_messages           = DATA(lt_messages) ).

        /dmo/cl_flight_legacy=>get_instance( )->convert_messages( EXPORTING it_messages = lt_messages
                                                            IMPORTING et_messages = messages ).

      map_messages(
          EXPORTING
            travel_id        = <travel_to_read>-TravelID
            messages         = messages
          IMPORTING
            failed_added = DATA(failed_added)
          CHANGING
            failed           = failed-travel
            reported         = reported-travel
        ).

      IF failed_added = abap_false.
        INSERT CORRESPONDING #( travel_out MAPPING TO ENTITY ) INTO TABLE result.
      ENDIF.
    ENDLOOP.

  ENDMETHOD.

  METHOD lock.
  ENDMETHOD.

  METHOD map_messages.
    failed_added = abap_false.
    LOOP AT messages INTO DATA(message).
      IF message-msgty = 'E' OR message-msgty = 'A'.
        APPEND VALUE #( %cid        = cid
                        travelid    = travel_id
                        %fail-cause = /dmo/cl_travel_auxiliary=>get_cause_from_message(
                                        msgid = message-msgid
                                        msgno = message-msgno
                                      ) )
               TO failed.
        failed_added = abap_true.
      ENDIF.

      APPEND VALUE #( %msg          = new_message(
                                        id       = message-msgid
                                        number   = message-msgno
                                        severity = if_abap_behv_message=>severity-error
                                        v1       = message-msgv1
                                        v2       = message-msgv2
                                        v3       = message-msgv3
                                        v4       = message-msgv4 )
                      %cid          = cid
                      TravelID      = travel_id )
             TO reported.
    ENDLOOP.
  ENDMETHOD.



  METHOD get_instance_features.

     read ENTITIES of ZI_BKL_XX_U_TRAVEL
     ENTITY Travel
     FIELDS ( TravelID Status )
     with corresponding #( keys )
     result data(lt_read_travel)
     failed data(lt_failed).

     result = value #( for travel_line in lt_read_travel (
                            %tky = travel_line-%tky
                            %features-%action-set_status_booked = cond #( when travel_line-Status = 'B'
                                                                            then if_abap_behv=>fc-o-disabled
                                                                            else if_abap_behv=>fc-o-enabled
                             )
      ) ).


*    DATA: travel_out TYPE /dmo/travel,
*          messages   TYPE /dmo/t_message.
*
*    LOOP AT keys ASSIGNING FIELD-SYMBOL(<travel_to_read>) GROUP BY <travel_to_read>-%tky.
*
*
*        /dmo/cl_flight_legacy=>get_instance( )->get_travel( EXPORTING iv_travel_id          = <travel_to_read>-travelid
*                                                                      iv_include_buffer     = ABAP_FALSE
*                                                      IMPORTING es_travel             = travel_out
*                                                                et_messages           = DATA(lt_messages) ).
*
*        /dmo/cl_flight_legacy=>get_instance( )->convert_messages( EXPORTING it_messages = lt_messages
*                                                            IMPORTING et_messages = messages ).
*
*      map_messages(
*          EXPORTING
*            travel_id        = <travel_to_read>-TravelID
*            messages         = messages
*          IMPORTING
*            failed_added = DATA(failed_added)
*          CHANGING
*            failed           = failed-travel
*            reported         = reported-travel
*        ).
*
*      IF failed_added = abap_false.
*        if travel_out-status = 'B'.
*            INSERT CORRESPONDING #( travel_out MAPPING TO ENTITY ) INTO TABLE result.
*            loop at result ASSIGNING FIELD-SYMBOL(<fs>).
*                <fs>-%action-set_status_booked = if_abap_behv=>fc-o-disabled.
*            ENDLOOP.
*        else.
*            INSERT CORRESPONDING #( travel_out MAPPING TO ENTITY ) INTO TABLE result.
*            loop at result ASSIGNING <fs>.
*                <fs>-%action-set_status_booked = if_abap_behv=>fc-o-enabled.
*            ENDLOOP.
*        ENDIF.
*      ENDIF.
*    ENDLOOP.

  ENDMETHOD.

  METHOD set_status_booked.
    DATA: messages                 TYPE /dmo/t_message,
          travel_out               TYPE /dmo/travel,
          travel_set_status_booked LIKE LINE OF result.

    CLEAR result.

    LOOP AT keys ASSIGNING FIELD-SYMBOL(<travel_set_status_booked>).

      DATA(travelid) = <travel_set_status_booked>-travelid.


      /dmo/cl_flight_legacy=>get_instance( )->set_status_to_booked( EXPORTING iv_travel_id = travelid
                                                                IMPORTING et_messages  = DATA(lt_messages) ).

      /dmo/cl_flight_legacy=>get_instance( )->convert_messages( EXPORTING it_messages  = lt_messages
                                                            IMPORTING et_messages  = messages ).

      map_messages(
          EXPORTING
            travel_id        = <travel_set_status_booked>-TravelID
            messages         = messages
          IMPORTING
            failed_added = DATA(failed_added)
          CHANGING
            failed           = failed-travel
            reported         = reported-travel
        ).

      IF failed_added = abap_false.

        /dmo/cl_flight_legacy=>get_instance( )->get_travel( EXPORTING iv_travel_id          = travelid
                                                                      iv_include_buffer     = ABAP_FALSE
                                                      IMPORTING es_travel             = travel_out ).

        travel_set_status_booked-travelid        = travelid.
        travel_set_status_booked-%param          = CORRESPONDING #( travel_out MAPPING TO ENTITY ).
        travel_set_status_booked-%param-travelid = travelid.
        APPEND travel_set_status_booked TO result.
      ENDIF.

    ENDLOOP.
  ENDMETHOD.

ENDCLASS.

CLASS lsc_ZI_BKL_XX_U_TRAVEL DEFINITION INHERITING FROM cl_abap_behavior_saver.
  PROTECTED SECTION.

    METHODS finalize REDEFINITION.

    METHODS check_before_save REDEFINITION.

    METHODS save REDEFINITION.

    METHODS cleanup REDEFINITION.

    METHODS cleanup_finalize REDEFINITION.

ENDCLASS.

CLASS lsc_ZI_BKL_XX_U_TRAVEL IMPLEMENTATION.

  METHOD finalize.
  ENDMETHOD.

  METHOD check_before_save.
  ENDMETHOD.

  METHOD save.
    /dmo/cl_flight_legacy=>get_instance( )->save( ).
  ENDMETHOD.

  METHOD cleanup.
    /dmo/cl_flight_legacy=>get_instance( )->initialize( ).
  ENDMETHOD.

  METHOD cleanup_finalize.
  ENDMETHOD.

ENDCLASS.
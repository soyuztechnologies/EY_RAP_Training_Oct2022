==============================Travel CDS Managed View===================================
@AbapCatalog.viewEnhancementCategory: [#NONE]
@AccessControl.authorizationCheck: #CHECK
@EndUserText.label: 'Travel Root Entity for Managed Scenario'
@Metadata.ignorePropagatedAnnotations: true
@ObjectModel.usageType:{
    serviceQuality: #X,
    sizeCategory: #S,
    dataClass: #MIXED
}
define root view entity ZBKL_XX_M_TRAVEL as select from /dmo/travel as Travel

composition[0..*] of ZBKL_XX_M_BOOKING as _Booking

association[1] to /DMO/I_Agency as _Agency on
$projection.AgencyId = _Agency.AgencyID
association[1] to /DMO/I_Customer as _Customer on
$projection.CustomerId = _Customer.CustomerID
association[1] to I_Currency as _Currency on
$projection.CurrencyCode = _Currency.Currency 
{
    key Travel.travel_id as TravelId,
    Travel.agency_id as AgencyId,
    Travel.customer_id as CustomerId,
    Travel.begin_date as BeginDate,
    Travel.end_date as EndDate,
    @Semantics.amount.currencyCode: 'CurrencyCode'
    Travel.booking_fee as BookingFee,
    @Semantics.amount.currencyCode: 'CurrencyCode'
    Travel.total_price as TotalPrice,
    Travel.currency_code as CurrencyCode,
    Travel.description as Description,
    Travel.status as Status,
    @Semantics.user.createdBy: true
    Travel.createdby as Createdby,
    @Semantics.systemDateTime.createdAt: true
    Travel.createdat as Createdat,
    @Semantics.user.lastChangedBy: true
    Travel.lastchangedby as Lastchangedby,
    @Semantics.systemDateTime.lastChangedAt: true
    Travel.lastchangedat as Lastchangedat,
    _Agency,
    _Customer,
    _Currency,
    _Booking
}

==============================Booking CDS Managed View==================================
@AbapCatalog.viewEnhancementCategory: [#NONE]
@AccessControl.authorizationCheck: #CHECK
@EndUserText.label: 'Booking Entity, Child of Travel 1..n'
@Metadata.ignorePropagatedAnnotations: true
@ObjectModel.usageType:{
    serviceQuality: #X,
    sizeCategory: #S,
    dataClass: #MIXED
}
define view entity ZBKL_XX_M_BOOKING as select from /dmo/booking as Booking 
association to parent ZBKL_XX_M_TRAVEL as _Travel on
$projection.TravelId = _Travel.TravelId
association[1..1] to /DMO/I_Customer as _Customer on 
$projection.CustomerId = _Customer.CustomerID
association[1..1] to /dmo/carrier as _Carrier on
$projection.CarrierId = _Carrier.carrier_id
association[1..1] to /DMO/I_Connection as _Connection on 
$projection.CarrierId = _Connection.AirlineID
and $projection.ConnectionId = _Connection.ConnectionID
{
    key Booking.travel_id as TravelId,
    key Booking.booking_id as BookingId,
    Booking.booking_date as BookingDate,
    Booking.customer_id as CustomerId,
    Booking.carrier_id as CarrierId,
    Booking.connection_id as ConnectionId,
    Booking.flight_date as FlightDate,
    @Semantics.amount.currencyCode: 'CurrencyCode'
    Booking.flight_price as FlightPrice,
    Booking.currency_code as CurrencyCode,
    @UI.hidden: true
    _Travel.Lastchangedat,  --take care of the ETag from parent
    /*Having a feeling of best friend*/
    _Travel,
    _Customer,
    _Carrier,
    _Connection
}

==============================Travel CDS Projection View================================
@EndUserText.label: 'Travel Root Projection'
@AccessControl.authorizationCheck: #CHECK
@UI.headerInfo:{
   typeName: 'ProcessorTravel',
   typeNamePlural: 'ProcessorTravels',
   title: { type: #STANDARD, value: 'TravelId' },
   description :{ type: #STANDARD, value: 'Description' }
}
@Search.searchable: true
define root view entity ZC_BKL_XX_TRAVEL_PROCESSOR 
    as projection on ZBKL_XX_M_TRAVEL {
    
    @UI.facet: [{
        id:'Travel',
        purpose: #STANDARD,
        type: #IDENTIFICATION_REFERENCE,
        label: 'Travel',
        position: 10
     },{
        id: 'Booking',
        type: #LINEITEM_REFERENCE,
        label: 'Booking',
        position: 20,
        targetElement: '_Booking'
        
     }]
    
    @UI.selectionField: [{position: 10 }]
    @UI.lineItem: [{position: 10 }]
    @UI.identification: [{position: 10, label: 'Travel ID[1,..,99999999]' }]
    @Search.defaultSearchElement: true
    @ObjectModel.text.element: ['Description']
    key TravelId,
    @UI.selectionField: [{position: 20 }]
    @UI.lineItem: [{position: 20 }]
    @UI.identification: [{position: 20 }]
    @Search.defaultSearchElement: true
    @Consumption.valueHelpDefinition: [{entity: {name: '/DMO/I_Agency', element: 'AgencyID'} }]
    @ObjectModel.text.element: ['AgencyName']
    AgencyId,
    _Agency.Name as AgencyName,
    @UI.selectionField: [{position: 30 }]
    @UI.lineItem: [{position: 30 }]
    @UI.identification: [{position: 30 }]
    @Search.defaultSearchElement: true
    @Consumption.valueHelpDefinition: [{entity: {name: '/DMO/I_Customer', element: 'CustomerID'} }]
    @ObjectModel.text.element: ['CustomerName']
    CustomerId,
    _Customer.FirstName as CustomerName,
    @UI.identification: [{position: 40 }]
    @UI.lineItem: [{position: 40 }]
    BeginDate,
    @UI.identification: [{position: 50 }]
    EndDate,
    @UI.identification: [{position: 60 }]
    BookingFee,
    @UI.identification: [{position: 70 }]
    TotalPrice,
    CurrencyCode,
    @UI.identification: [{position: 80 }]
    Description,
    @UI.identification: [{position: 90 }]
    @UI.lineItem: [{ position: 45, type: #FOR_ACTION, label: 'Create By Template', dataAction: 'createTravelByTemplate'  }]
    Status,
    @UI.hidden: true
    Lastchangedat,
    /* Associations */
    _Agency,
    _Booking : redirected to composition child ZC_BKL_XX_BOOKING_PROCESSOR,
    _Currency,
    _Customer
}

==============================Booking CDS Projection View===============================
@EndUserText.label: 'booking processor projection'
@AccessControl.authorizationCheck: #CHECK
@UI.headerInfo:{
    typeName: 'Booking',
    typeNamePlural: 'Bookings',
    title:{ type: #STANDARD, value: 'BookingId' }
}
define view entity ZC_BKL_XX_BOOKING_PROCESSOR 
as projection on ZBKL_XX_M_BOOKING {
    @UI.facet: [{
        id: 'Booking',
        purpose: #STANDARD,
        type: #IDENTIFICATION_REFERENCE,
        label: 'Booking',
        position: 10        
     }]

    @Search.defaultSearchElement: true
    key TravelId,
    @UI : { lineItem: [{position: 10, importance: #HIGH }],
            identification: [{position: 10 }] }
    key BookingId,
    @UI : { lineItem: [{position: 20, importance: #HIGH }],
            identification: [{position: 20 }] }
    BookingDate,
    @UI : { lineItem: [{position: 30, importance: #HIGH }],
            identification: [{position: 30 }] }
    @Consumption.valueHelpDefinition: [{entity: {name: '/DMO/I_Customer', element: 'CustomerID'} }]
    CustomerId,
    @UI : { lineItem: [{position: 40, importance: #HIGH }],
            identification: [{position: 40 }] }
    @Consumption.valueHelpDefinition: [{entity: {name: '/DMO/I_Carrier', element: 'AirlineID'} }]
    CarrierId,
    @UI : { lineItem: [{position: 50, importance: #HIGH }],
            identification: [{position: 50 }] }
    @Consumption.valueHelpDefinition: [{entity: {name: '/DMO/I_Flight', element: 'ConnectionID'} ,
                                       additionalBinding: [{ localElement: 'FlightDate', element: 'FlightDate' },
                                       { localElement: 'CarrierId', element: 'AirlineID' },
                                       { localElement: 'FlightPrice', element: 'Price' },
                                       { localElement: 'CurrencyCode', element: 'CurrencyCode' }]
    }]
    ConnectionId,
    @UI : { lineItem: [{position: 60, importance: #HIGH }],
            identification: [{position: 60 }] }
    @Consumption.valueHelpDefinition: [{entity: {name: '/DMO/I_Flight', element: 'FlightDate'} ,
                                       additionalBinding: [{ localElement: 'FlightDate', element: 'FlightDate' },
                                       { localElement: 'CarrierId', element: 'AirlineID' },
                                       { localElement: 'FlightPrice', element: 'Price' },
                                       { localElement: 'CurrencyCode', element: 'CurrencyCode' }]
    }]
    FlightDate,
    @UI : { lineItem: [{position: 70, importance: #HIGH }],
            identification: [{position: 70 }] }
    @Semantics.amount.currencyCode: 'CurrencyCode'            
    FlightPrice,
    @UI : { lineItem: [{position: 80, importance: #HIGH }],
            identification: [{position: 80 }] }
    @Consumption.valueHelpDefinition: [{entity: {name: 'I_Currency', element: 'Currency'} }]
    CurrencyCode,
    @UI.hidden: true
    Lastchangedat,
    /* Associations */
    _Carrier,
    _Connection,
    _Customer,
    _Travel : redirected to parent ZC_BKL_XX_TRAVEL_PROCESSOR
}

==============================Behavior Definition Core==================================
managed implementation in class zbp_bkl_xx_m_travel unique;
//strict;

define behavior for ZBKL_XX_M_TRAVEL alias Travel
persistent table /DMO/TRAVEL
lock master
//authorization master ( instance )
etag master Lastchangedat
{
  create;
  update;
  delete;
  association _Booking { create; }

  action createTravelByTemplate result[1] $self;

  mapping for /dmo/travel{
    TravelId = travel_id;
    AgencyId = agency_id;
    CustomerId = customer_id;
    BeginDate = begin_date;
    EndDate = end_date;
    TotalPrice = total_price;
    BookingFee = booking_fee;
    CurrencyCode = currency_code;
    Description = description;
    Status = status;
    Createdat = createdat;
    Createdby = createdby;
    Lastchangedat = lastchangedat;
    Lastchangedby = lastchangedby;

  }

}

define behavior for ZBKL_XX_M_BOOKING alias Booking
persistent table /dmo/booking
lock dependent by _Travel
//authorization dependent by _Travel
etag master Lastchangedat
{
  update;
  delete;
  field ( readonly ) TravelId;
  association _Travel;

  mapping for /dmo/booking{
    BookingId = booking_id;
    TravelId = travel_id;
    BookingDate = booking_date;
    CustomerId = customer_id;
    CarrierId = carrier_id;
    ConnectionId = connection_id;
    FlightDate = flight_date;
    FlightPrice = flight_price;
    CurrencyCode = currency_code;
  }
}
==============================Behavior Projection=======================================
projection;
//strict; //Comment this line in to enable strict mode. The strict mode is prerequisite to be future proof regarding syntax and to be able to release your BO.

define behavior for ZC_BKL_XX_TRAVEL_PROCESSOR //alias <alias_name>
{

  field( mandatory ) BeginDate, EndDate, CustomerId;
  use create;
  use update;
  use delete;
  use action createTravelByTemplate;

  use association _Booking { create; }
}

define behavior for ZC_BKL_XX_BOOKING_PROCESSOR //alias <alias_name>
{
  use update;
  use delete;

  use association _Travel;
}
==============================Service Definition========================================

@EndUserText.label: 'Processor service definition'
define service ZBKL_XX_SD_PROCESSOR {
  expose ZC_BKL_XX_TRAVEL_PROCESSOR as Travel;
  expose ZC_BKL_XX_BOOKING_PROCESSOR as Booking;
  expose /DMO/I_Customer as Passenger;
  expose /DMO/I_Agency as Agency;
  expose I_Currency as Currency;
  expose I_Country as Country;
  expose /DMO/I_Carrier as Carrier;
  expose /DMO/I_Connection as Connection;
  expose /DMO/I_Flight as Flight;
}

==============================Behavior Implementation===================================
CLASS lhc_Travel DEFINITION INHERITING FROM cl_abap_behavior_handler.
  PRIVATE SECTION.

    METHODS createTravelByTemplate FOR MODIFY
      IMPORTING keys FOR ACTION Travel~createTravelByTemplate RESULT result.

ENDCLASS.

CLASS lhc_Travel IMPLEMENTATION.

  METHOD createTravelByTemplate.

    select max( travel_id ) from /dmo/travel  into @data(lv_travel_id).

    read ENTITIES of ZBKL_XX_M_TRAVEL in local mode
    ENTITY travel
    fields ( travelid agencyid customerid bookingfee totalprice currencycode begindate enddate )
    WITH CORRESPONDING #( keys )
    RESULT data(lt_read_result)
    FAILED data(lt_failed)
    REPORTED data(lt_reported).

    data(lv_today) = cl_abap_context_info=>get_system_date(  ).

    data lt_create type table for create ZBKL_XX_M_TRAVEL\\Travel.

    lt_create = value #( for row in lt_read_result index into idx (
                                %cid = row-TravelId
                                TravelId = lv_travel_id + 1
                                AgencyId = row-AgencyId
                                CustomerId = row-CustomerId
                                TotalPrice = row-TotalPrice
                                BookingFee = row-BookingFee
                                CurrencyCode = row-CurrencyCode
                                BeginDate = lv_today
                                EndDate = lv_today + 30
                                Description = 'Created by Template'
                                Status = 'N'

     ) ).

      MODIFY ENTITIES of ZBKL_XX_M_TRAVEL in local mode
      ENTITY Travel
      create fields ( travelid agencyid customerid bookingfee totalprice currencycode begindate enddate )
      with lt_create
      mapped mapped
      failed  lt_failed
      REPORTED lt_reported.


      read ENTITIES of ZBKL_XX_M_TRAVEL in local mode
        ENTITY travel
        all fields
        WITH CORRESPONDING #( mapped-travel )
        RESULT data(lt_read_created)
        FAILED lt_failed
        REPORTED lt_reported.

       result = value #( for key in mapped-travel index into idx
                            (
                                %cid_ref = keys[ key entity %key = key-%cid ]-%cid_ref
                                %key = key-%cid
                                %param-%tky = key-%tky
                            )
       ).

       result = CORRESPONDING #( result from lt_read_created using key entity %key = %param-%key
        mapping %param = %data except *
       ).


  ENDMETHOD.

ENDCLASS.
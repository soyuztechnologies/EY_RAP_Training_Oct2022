Send only the feature control back to the table
%tky
%action - used to enable and disable button on the screen

If we send data back to the table
%tky
%param - complete data which needs to be shown to the user


%tky
%msg = specify error message which will come on fiori UI
%element = the field on the UI which is having dirty data
$state_area = 'unique name'
reported


managed implementation in class zbp_bkl_xx_m_travel unique;
with draft;
//strict;

define behavior for ZBKL_XX_M_TRAVEL alias Travel
persistent table /DMO/TRAVEL
lock master
total etag Lastchangedat
draft table zbkl_xx_trv_d
//authorization master ( instance )
etag master Lastchangedat
early numbering
{
  create;
  update;
  delete;
  association _Booking { create; with draft; }

  action createTravelByTemplate result[1] $self;

  field( features:instance ) travelid;
  action ( features: instance ) acceptTravel result[1] $self;
  action ( features: instance ) rejectTravel result[1] $self;

  validation validateCustomer on save { field CustomerId; create; }
  validation validateDates on save { field BeginDate, EndDate; create; }
  validation validateStatus on save { field Status; }

  draft determine action Prepare
  {
    validation validateCustomer;
    validation validateDates;
    validation validateStatus;
  }

  mapping for /dmo/travel{
    TravelId = travel_id;
    AgencyId = agency_id;
    CustomerId = customer_id;
    BeginDate = begin_date;
    EndDate = end_date;
    TotalPrice = total_price;
    BookingFee = booking_fee;
    CurrencyCode = currency_code;
    Description = description;
    Status = status;
    Createdat = createdat;
    Createdby = createdby;
    Lastchangedat = lastchangedat;
    Lastchangedby = lastchangedby;

  }

}

define behavior for ZBKL_XX_M_BOOKING alias Booking
implementation in class zbp_bkl_xx_m_booking unique
persistent table /dmo/booking
draft table zbkl_xx_book_d
lock dependent by _Travel
//authorization dependent by _Travel
etag master Lastchangedat
early numbering
{
  update;
  delete;
  field ( readonly ) TravelId;
  association _Travel{ with draft; }

  field ( mandatory ) CarrierId, ConnectionId, FlightDate;

  field ( features : instance ) BookingId, BookingDate, CustomerId;

  determination calculateTotalFlightPrice on modify { field flightprice, currencycode ; create; }

  mapping for /dmo/booking{
    BookingId = booking_id;
    TravelId = travel_id;
    BookingDate = booking_date;
    CustomerId = customer_id;
    CarrierId = carrier_id;
    ConnectionId = connection_id;
    FlightDate = flight_date;
    FlightPrice = flight_price;
    CurrencyCode = currency_code;
  }
}


projection;
use draft;
//strict; //Comment this line in to enable strict mode. The strict mode is prerequisite to be future proof regarding syntax and to be able to release your BO.

define behavior for ZC_BKL_XX_TRAVEL_PROCESSOR //alias <alias_name>
implementation in class ZCL_BKL_XX_TRV_PROCESSOR
{

  field( mandatory ) BeginDate, EndDate, CustomerId;
  use create ( augment );
  use update;
  use delete;
  use action createTravelByTemplate;

  use association _Booking { create; with draft; }
}

define behavior for ZC_BKL_XX_BOOKING_PROCESSOR //alias <alias_name>
{
  use update;
  use delete;

  use association _Travel  {with draft;}
}


CLASS lhc_Travel DEFINITION INHERITING FROM cl_abap_behavior_handler.
  PRIVATE SECTION.

    METHODS createTravelByTemplate FOR MODIFY
      IMPORTING keys FOR ACTION Travel~createTravelByTemplate RESULT result.
    METHODS get_instance_features FOR INSTANCE FEATURES
      IMPORTING keys REQUEST requested_features FOR Travel RESULT result.

    METHODS acceptTravel FOR MODIFY
      IMPORTING keys FOR ACTION Travel~acceptTravel RESULT result.

    METHODS rejectTravel FOR MODIFY
      IMPORTING keys FOR ACTION Travel~rejectTravel RESULT result.
    METHODS validateCustomer FOR VALIDATE ON SAVE
      IMPORTING keys FOR Travel~validateCustomer.

    METHODS validateDates FOR VALIDATE ON SAVE
      IMPORTING keys FOR Travel~validateDates.

    METHODS validateStatus FOR VALIDATE ON SAVE
      IMPORTING keys FOR Travel~validateStatus.
    METHODS earlynumbering_create FOR NUMBERING
      IMPORTING entities FOR CREATE Travel.

    METHODS earlynumbering_cba_Booking FOR NUMBERING
      IMPORTING entities FOR CREATE Travel\_Booking.

ENDCLASS.

CLASS lhc_Travel IMPLEMENTATION.

  METHOD createTravelByTemplate.

    select max( travel_id ) from /dmo/travel  into @data(lv_travel_id).

    read ENTITIES of ZBKL_XX_M_TRAVEL in local mode
    ENTITY travel
    fields ( travelid agencyid customerid bookingfee totalprice currencycode begindate enddate )
    WITH CORRESPONDING #( keys )
    RESULT data(lt_read_result)
    FAILED data(lt_failed)
    REPORTED data(lt_reported).

    data(lv_today) = cl_abap_context_info=>get_system_date(  ).

    data lt_create type table for create ZBKL_XX_M_TRAVEL\\Travel.

    lt_create = value #( for row in lt_read_result index into idx (
                                %cid = row-TravelId
                                TravelId = lv_travel_id + 1
                                AgencyId = row-AgencyId
                                CustomerId = row-CustomerId
                                TotalPrice = row-TotalPrice
                                BookingFee = row-BookingFee
                                CurrencyCode = row-CurrencyCode
                                BeginDate = lv_today
                                EndDate = lv_today + 30
                                Description = 'Created by Template'
                                Status = 'N'

     ) ).

      MODIFY ENTITIES of ZBKL_XX_M_TRAVEL in local mode
      ENTITY Travel
      create fields ( travelid agencyid customerid bookingfee totalprice currencycode begindate enddate )
      with lt_create
      mapped mapped
      failed  lt_failed
      REPORTED lt_reported.


      read ENTITIES of ZBKL_XX_M_TRAVEL in local mode
        ENTITY travel
        all fields
        WITH CORRESPONDING #( mapped-travel )
        RESULT data(lt_read_created)
        FAILED lt_failed
        REPORTED lt_reported.

       result = value #( for key in mapped-travel index into idx
                            (
                                %cid_ref = keys[ key entity %key = key-%cid ]-%cid_ref
                                %key = key-%cid
                                %param-%tky = key-%tky
                            )
       ).

       result = CORRESPONDING #( result from lt_read_created using key entity %key = %param-%key
        mapping %param = %data except *
       ).


  ENDMETHOD.

  METHOD get_instance_features.

    read ENTITIES of ZBKL_XX_M_TRAVEL
     IN LOCAL MODE
     ENTITY Travel
     FIELDS ( status )
     WITH CORRESPONDING #( keys )
     RESULT data(lt_travel_result)
     failed failed.

     result = value #( for line_travel in  lt_travel_result (
                                                %tky = line_travel-%tky
                                                %field-TravelId = if_abap_behv=>fc-f-read_only
                                                %features-%action-rejectTravel = cond #( when line_travel-Status = 'X'
                                                                                then if_abap_behv=>fc-o-disabled
                                                                                else  if_abap_behv=>fc-o-enabled
                                               )
                                                %features-%action-acceptTravel = cond #( when line_travel-Status = 'A'
                                                                                then if_abap_behv=>fc-o-disabled
                                                                                else  if_abap_behv=>fc-o-enabled
                                               )
      ) ).

  ENDMETHOD.

  METHOD acceptTravel.

    MODIFY ENTITIES of ZBKL_XX_M_TRAVEL
    in LOCAL MODE
    ENTITY travel
    UPDATE FIELDS ( status )
    WITH VALUE #( for key in keys (  %tky = key-%tky Status = 'A' ) )
    failed failed
    reported reported.


    READ ENTIties of ZBKL_XX_M_TRAVEL in local mode
    ENTITY travel
    all fields with
    corresponding #( keys )
    result data(lt_output).

    result = value #( for travel in lt_output (  %tky = travel-%tky %param = travel ) ).

  ENDMETHOD.

  METHOD rejectTravel.

    MODIFY ENTITIES of ZBKL_XX_M_TRAVEL
    in LOCAL MODE
    ENTITY travel
    UPDATE FIELDS ( status )
    WITH VALUE #( for key in keys (  %tky = key-%tky Status = 'X' ) )
    failed failed
    reported reported.


    READ ENTIties of ZBKL_XX_M_TRAVEL in local mode
    ENTITY travel
    all fields with
    corresponding #( keys )
    result data(lt_output).

    result = value #( for travel in lt_output (  %tky = travel-%tky %param = travel ) ).

  ENDMETHOD.

  METHOD validateCustomer.

    "Step 1: Read the entity data customer ID
    READ ENTITIES OF ZBKL_XX_M_TRAVEL IN LOCAL MODE
        ENTITY Travel
          FIELDS ( customerid )
          WITH CORRESPONDING #( keys )
        RESULT DATA(lt_travel)
        FAILED DATA(lt_failed).

    "Step 2: mapped failed
    failed =  CORRESPONDING #( DEEP lt_failed  ).

    DATA lt_customer TYPE SORTED TABLE OF /dmo/customer WITH UNIQUE KEY customer_id.

    "Step 3: Get all the unique customer IDs to a internal table
    " Optimization of DB select: extract distinct non-initial customer IDs
    lt_customer = CORRESPONDING #( lt_travel DISCARDING DUPLICATES MAPPING customer_id = customerid EXCEPT * ).
    DELETE lt_customer WHERE customer_id IS INITIAL.

    IF  lt_customer IS NOT INITIAL.
      " Check if customer ID exists
      "Step 4: Select from customer master table and fetch info - itab
      SELECT FROM /dmo/customer FIELDS customer_id
                                FOR ALL ENTRIES IN @lt_customer
                                WHERE customer_id = @lt_customer-customer_id
      INTO TABLE @DATA(lt_customer_db).
    ENDIF.

    " Raise message for non existing customer id
    "Step 5: Loop at each travel record, check if itab has that customerId
    LOOP AT lt_travel INTO DATA(ls_travel).

      APPEND VALUE #(  %tky                 = ls_travel-%tky
                       %state_area          = 'VALIDATE_CUSTOMER' ) TO reported-travel.

      "Step 6: if we not find - Throw Error 1
      IF ls_travel-customerid IS  INITIAL.
        APPEND VALUE #( %tky = ls_travel-%tky ) TO failed-travel.
        "Step 7: Return the %tky, %state_area, %element, %msg
        APPEND VALUE #( %tky                = ls_travel-%tky
                        %state_area         = 'VALIDATE_CUSTOMER'
                        %msg                = NEW /dmo/cm_flight_messages(
                                                                textid = /dmo/cm_flight_messages=>enter_customer_id
                                                                severity = if_abap_behv_message=>severity-error )
                        %element-customerid = if_abap_behv=>mk-on ) TO reported-travel.

      "Step 6: if we not find -  Not Valid - Throw Error2
      ELSEIF ls_travel-customerid IS NOT INITIAL AND NOT line_exists( lt_customer_db[ customer_id = ls_travel-customerid ] ).
        APPEND VALUE #(  %tky = ls_travel-%tky ) TO failed-travel.
        "Step 7: Return the %tky, %state_area, %element, %msg
        APPEND VALUE #(  %tky                = ls_travel-%tky
                         %state_area         = 'VALIDATE_CUSTOMER'
                         %msg                = NEW /dmo/cm_flight_messages(
                                                                customer_id = ls_travel-CustomerId
                                                                textid = /dmo/cm_flight_messages=>customer_unkown
                                                                severity = if_abap_behv_message=>severity-error )
                         %element-customerid = if_abap_behv=>mk-on ) TO reported-travel.
      ENDIF.
     ENDLOOP.

  ENDMETHOD.

  METHOD validateDates.

    READ ENTITIES OF ZBKL_XX_M_TRAVEL IN LOCAL MODE
         ENTITY Travel
           FIELDS (  begindate enddate travelid )
           WITH CORRESPONDING #( keys )
         RESULT DATA(lt_travel)
         FAILED DATA(lt_failed).

    failed =  CORRESPONDING #( DEEP lt_failed  ).

    LOOP AT lt_travel INTO DATA(ls_travel).

      APPEND VALUE #(  %tky               = ls_travel-%tky
                       %state_area          = 'VALIDATE_DATES' ) TO reported-travel.

      IF ls_travel-begindate IS INITIAL.
        APPEND VALUE #( %tky = ls_travel-%tky ) TO failed-travel.

        APPEND VALUE #( %tky               = ls_travel-%tky
                        %state_area        = 'VALIDATE_DATES'
                         %msg                = NEW /dmo/cm_flight_messages(
                                                                textid = /dmo/cm_flight_messages=>enter_begin_date
                                                                severity = if_abap_behv_message=>severity-error )
                        %element-begindate = if_abap_behv=>mk-on ) TO reported-travel.
      ENDIF.
      IF ls_travel-enddate IS INITIAL.
        APPEND VALUE #( %tky = ls_travel-%tky ) TO failed-travel.

        APPEND VALUE #( %tky               = ls_travel-%tky
                        %state_area        = 'VALIDATE_DATES'
                         %msg                = NEW /dmo/cm_flight_messages(
                                                                textid = /dmo/cm_flight_messages=>enter_end_date
                                                                severity = if_abap_behv_message=>severity-error )
                        %element-enddate   = if_abap_behv=>mk-on ) TO reported-travel.
      ENDIF.
      IF ls_travel-enddate < ls_travel-begindate AND ls_travel-begindate IS NOT INITIAL
                                                 AND ls_travel-enddate IS NOT INITIAL.
        APPEND VALUE #( %tky = ls_travel-%tky ) TO failed-travel.

        APPEND VALUE #( %tky               = ls_travel-%tky
                        %state_area        = 'VALIDATE_DATES'
                        %msg               = NEW /dmo/cm_flight_messages(
                                                                textid = /dmo/cm_flight_messages=>begin_date_bef_end_date
                                                                begin_date = ls_travel-begindate
                                                                end_date   = ls_travel-enddate
                                                                severity = if_abap_behv_message=>severity-error )
                        %element-begindate = if_abap_behv=>mk-on
                        %element-enddate   = if_abap_behv=>mk-on ) TO reported-travel.
      ENDIF.

      IF ls_travel-begindate < cl_abap_context_info=>get_system_date( ) AND ls_travel-begindate IS NOT INITIAL.
        APPEND VALUE #( %tky               = ls_travel-%tky ) TO failed-travel.

        APPEND VALUE #( %tky               = ls_travel-%tky
                        %state_area        = 'VALIDATE_DATES'
                         %msg                = NEW /dmo/cm_flight_messages(
                                                                begin_date = ls_travel-begindate
                                                                textid = /dmo/cm_flight_messages=>begin_date_on_or_bef_sysdate
                                                                severity = if_abap_behv_message=>severity-error )
                        %element-begindate = if_abap_behv=>mk-on ) TO reported-travel.
      ENDIF.

    ENDLOOP.


  ENDMETHOD.

  METHOD validateStatus.

        READ ENTITIES OF ZBKL_XX_M_TRAVEL IN LOCAL MODE
            ENTITY Travel
            FIELDS (  status )
            WITH CORRESPONDING #( keys )
            RESULT DATA(lt_travel_result)
            FAILED DATA(lt_failed).

        LOOP AT lt_travel_result INTO DATA(ls_travel_result).
          CASE ls_travel_result-status.
            WHEN 'O'.  " Open
            WHEN 'X'.  " Cancelled
            WHEN 'A'.  " Accepted

            WHEN OTHERS.

              APPEND VALUE #( %tky = ls_travel_result-%tky ) TO failed-travel.

              APPEND VALUE #( %tky = ls_travel_result-%tky
                              %msg = new_message_with_text(
                                       severity = if_abap_behv_message=>severity-error
                                       text     = 'Invalid Status'
                                     )
                              %element-status = if_abap_behv=>mk-on ) TO reported-travel.
          ENDCASE.

        ENDLOOP.

  ENDMETHOD.

  METHOD earlynumbering_create.

    "Input Entities , Output as Mapped
    "Read the data from screen key, content id and is this a draft record, where travel id id blank
    "use select query to get MAX travel id in our draft and main table
    "If the draft table travel id > travel id, use that as reference
    "Send the mapped data with travel id increment by 1

    " Mapping for already assigned travel IDs (e.g. during draft activation)
     mapped-travel = VALUE #( FOR entity IN entities WHERE ( travelid IS NOT INITIAL )
                                                          ( %cid      = entity-%cid
                                                            %is_draft = entity-%is_draft
                                                            %key      = entity-%key ) ).

    " This should be a number range. But for the demo purpose, avoiding the need to configure this in each and every system, we select the max value ...

    SELECT MAX( travel_id ) FROM /dmo/travel INTO @DATA(max_travel_id).
    SELECT MAX( travelid ) FROM zbkl_xx_trv_d INTO @DATA(max_d_travel_id).

    IF max_d_travel_id > max_travel_id.  max_travel_id = max_d_travel_id.  ENDIF.

    " Mapping for newly assigned travel IDs
    mapped-travel = VALUE #( BASE mapped-travel FOR entity IN entities INDEX INTO i
                                                    USING KEY entity
                                                    WHERE ( travelid IS INITIAL )
                                                          ( %cid      = entity-%cid
                                                            %is_draft = entity-%is_draft
                                                            travelid  = max_travel_id + i ) ).




  ENDMETHOD.

  METHOD earlynumbering_cba_Booking.

    DATA: max_booking_id TYPE /dmo/booking_id.

    READ ENTITIES OF ZBKL_XX_M_TRAVEL IN LOCAL MODE
      ENTITY Travel BY \_Booking
        FIELDS ( bookingid )
          WITH CORRESPONDING #( entities )
          RESULT DATA(bookings)
          FAILED failed.

    LOOP AT entities INTO DATA(entity).
      CLEAR: max_booking_id.
      LOOP AT bookings INTO DATA(booking) USING KEY draft WHERE %is_draft = entity-%is_draft
                                                          AND   travelid  = entity-Travelid.
        IF booking-Bookingid > max_booking_id.
            max_booking_id = booking-Bookingid.
        ENDIF.
      ENDLOOP.
      " Map bookings that already have a BookingID.
      LOOP AT entity-%target INTO DATA(already_mapped_target) WHERE Bookingid IS NOT INITIAL.
        APPEND CORRESPONDING #( already_mapped_target ) TO mapped-booking.
        IF already_mapped_target-Bookingid > max_booking_id.
            max_booking_id = already_mapped_target-Bookingid.
        ENDIF.
      ENDLOOP.
      " Map bookings with new BookingIDs.
      LOOP AT entity-%target INTO DATA(target) WHERE Bookingid IS INITIAL.
        max_booking_id += 5.
        APPEND CORRESPONDING #( target ) TO mapped-booking ASSIGNING FIELD-SYMBOL(<mapped_booking>).
        <mapped_booking>-Bookingid = max_booking_id.
      ENDLOOP.
    ENDLOOP.

  ENDMETHOD.

ENDCLASS.


CLASS lhc_ZC_BKL_XX_TRAVEL_PROCESSOR DEFINITION INHERITING FROM cl_abap_behavior_handler.
  PRIVATE SECTION.

    METHODS augment_create FOR MODIFY
      IMPORTING entities FOR CREATE zc_bkl_xx_travel_processor.

ENDCLASS.

CLASS lhc_ZC_BKL_XX_TRAVEL_PROCESSOR IMPLEMENTATION.

  METHOD augment_create.

    DATA: travel_create TYPE TABLE FOR CREATE ZBKL_XX_M_TRAVEL.

    travel_create = CORRESPONDING #( entities ).
    LOOP AT travel_create ASSIGNING FIELD-SYMBOL(<travel>).
      <travel>-agencyid = '070012'.
      <travel>-status  = 'O'.
      <travel>-%control-agencyid = if_abap_behv=>mk-on.
      <travel>-%control-status = if_abap_behv=>mk-on.
    ENDLOOP.

    MODIFY AUGMENTING ENTITIES OF ZBKL_XX_M_TRAVEL ENTITY Travel CREATE FROM travel_create.

  ENDMETHOD.

ENDCLASS.




CLASS lhc_Booking DEFINITION INHERITING FROM cl_abap_behavior_handler.
  PRIVATE SECTION.

    METHODS get_instance_features FOR INSTANCE FEATURES
      IMPORTING keys REQUEST requested_features FOR Booking RESULT result.
    METHODS calculatetotalflightprice FOR DETERMINE ON MODIFY
      IMPORTING keys FOR booking~calculatetotalflightprice.

ENDCLASS.

CLASS lhc_Booking IMPLEMENTATION.

  METHOD get_instance_features.

    read entities of ZBKL_XX_M_TRAVEL in local mode
    entity booking
    fields (  carrierid )
    with corresponding #( keys )
    result data(lt_booking)
    failed data(lt_failed).


    result = value #(  for line_booking in lt_booking (
                            %tky = line_booking-%tky
                            %field-BookingDate = if_abap_behv=>fc-f-read_only
                            %field-BookingId = if_abap_behv=>fc-f-read_only
                            %field-CustomerId = cond #( when line_booking-CarrierId = 'AA'
                                                            then if_abap_behv=>fc-f-read_only
                                                            else if_abap_behv=>fc-f-unrestricted

                             )

     ) ).




  ENDMETHOD.

  METHOD calculateTotalFlightPrice.

        "Step 1: Define an internal table of all amount, currency code = curr_tab
        TYPES: BEGIN OF ty_amount_per_currencycode,
                 amount        TYPE /dmo/total_price,
                 currency_code TYPE /dmo/currency_code,
               END OF ty_amount_per_currencycode.

        DATA: amount_per_currencycode TYPE STANDARD TABLE OF ty_amount_per_currencycode.

        "Step 2: Read the data for booking fee and currency = send to curr_tab
        " Read all relevant travel instances.
        READ ENTITIES OF ZBKL_XX_M_TRAVEL IN LOCAL MODE
             ENTITY Travel
                FIELDS ( bookingfee currencycode )
                WITH CORRESPONDING #( keys )
             RESULT DATA(lt_travel).


        DELETE lt_travel WHERE currencycode IS INITIAL.

        LOOP AT lt_travel ASSIGNING FIELD-SYMBOL(<fs_travel>).
          " Set the start for the calculation by adding the booking fee.
          amount_per_currencycode = VALUE #( ( amount        = <fs_travel>-bookingfee
                                               currency_code = <fs_travel>-currencycode ) ).

          "Step 3: for Each travel read the asssociated booking data flight price currency
          " Read all associated bookings and add them to the total price.
          READ ENTITIES OF ZBKL_XX_M_TRAVEL IN LOCAL MODE
            ENTITY Travel BY \_Booking
              FIELDS ( flightprice currencycode )
            WITH VALUE #( ( %tky = <fs_travel>-%tky ) )
            RESULT DATA(lt_booking).

          "step 4: Loop and collect the value to curr_tab
          LOOP AT lt_booking INTO DATA(booking) WHERE currencycode IS NOT INITIAL.
            COLLECT VALUE ty_amount_per_currencycode( amount        = booking-flightprice
                                                      currency_code = booking-currencycode ) INTO amount_per_currencycode.
          ENDLOOP.



          CLEAR <fs_travel>-totalprice.

          "step 5: loop at curr_tab, convert forign amounts to common currency
          LOOP AT amount_per_currencycode INTO DATA(single_amount_per_currencycode).
            " If needed do a Currency Conversion
            IF single_amount_per_currencycode-currency_code = <fs_travel>-currencycode.
            "Step 6: Total amount
              <fs_travel>-totalprice += single_amount_per_currencycode-amount.
            ELSE.
              TRY  .
                  /dmo/cl_flight_amdp=>convert_currency(
                     EXPORTING
                       iv_amount                   =  single_amount_per_currencycode-amount
                       iv_currency_code_source     =  single_amount_per_currencycode-currency_code
                       iv_currency_code_target     =  <fs_travel>-currencycode
                       iv_exchange_rate_date       =  cl_abap_context_info=>get_system_date( )
                     IMPORTING
                       ev_amount                   = DATA(total_booking_price_per_curr)
                    ).
                CATCH cx_amdp_execution_failed.

              ENDTRY.
              "Step 6: Total amount
              <fs_travel>-totalprice += total_booking_price_per_curr.
            ENDIF.
          ENDLOOP.
        ENDLOOP.

        "Step 7: Change the data in the BO
        " write back the modified total_price of travels
        MODIFY ENTITIES OF ZBKL_XX_M_TRAVEL IN LOCAL MODE
          ENTITY travel
            UPDATE FIELDS ( totalprice )
            WITH CORRESPONDING #( lt_travel ).

  ENDMETHOD.

ENDCLASS.
    








    
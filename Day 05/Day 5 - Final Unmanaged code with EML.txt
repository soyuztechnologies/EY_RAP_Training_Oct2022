1. Create a buffer in the global class

PUBLIC SECTION.
        CLASS-DATA: mt_create_buffer_2 TYPE /dmo/t_travel.

2. Code for create function


  METHOD create.

    data: messages type /dmo/t_message,
          travel_in type /dmo/travel,
          travel_out type /dmo/travel.

    "Step 1: Loop at all the data come from Fiori App
    LOOP AT entities ASSIGNING FIELD-SYMBOL(<travel_create>).

        "Step 2: Map the data which was received to the input structure
        travel_in = CORRESPONDING #( <travel_create> mapping from entity using control ).

        "Step 3: Imaging in your company you have OLD code - FM, Class, Report..
        append travel_in to zbp_ey_ao_i_u_travel=>mt_create_buffer_2 .

    ENDLOOP.

  ENDMETHOD.

3. Save Sequence we are saving data

METHOD save.
     INSERT /dmo/travel FROM TABLE @zbp_ey_ao_i_u_travel=>mt_create_buffer_2.
     /dmo/cl_flight_legacy=>get_instance(  )->save(  ).
  ENDMETHOD.


@AbapCatalog.viewEnhancementCategory: [#NONE]
@AccessControl.authorizationCheck: #NOT_REQUIRED
@EndUserText.label: 'Agency Entity'
@Metadata.ignorePropagatedAnnotations: true
@ObjectModel.usageType:{
    serviceQuality: #X,
    sizeCategory: #S,
    dataClass: #MIXED
}
define view entity ZEY_AO_U_AGENCY as select from /dmo/agency as Agency
association[1] to I_Country as _Country on
$projection.CountryCode = _Country.Country
{
    key agency_id as AgencyId,
    name as Name,
    street as Street,
    postal_code as PostalCode,
    city as City,
    country_code as CountryCode,
    phone_number as PhoneNumber,
    email_address as EmailAddress,
    web_address as WebAddress,
    _Country
}



@AbapCatalog.viewEnhancementCategory: [#NONE]
@AccessControl.authorizationCheck: #NOT_REQUIRED
@EndUserText.label: 'Customer Master data'
@Metadata.ignorePropagatedAnnotations: true
@ObjectModel.usageType:{
    serviceQuality: #X,
    sizeCategory: #S,
    dataClass: #MIXED
}
define view entity ZEY_AO_U_CUSTOMER as select from /dmo/customer as Customer 
association[1] to I_Country as _Country on
$projection.CountryCode = _Country.Country
{
    key customer_id as CustomerId,
    first_name as FirstName,
    last_name as LastName,
    title as Title,
    street as Street,
    postal_code as PostalCode,
    city as City,
    country_code as CountryCode,
    phone_number as PhoneNumber,
    email_address as EmailAddress,
    _Country
}



@AbapCatalog.viewEnhancementCategory: [#NONE]
@AccessControl.authorizationCheck: #NOT_REQUIRED
@EndUserText.label: 'Root View for Travel Un managed scenario'
@Metadata.ignorePropagatedAnnotations: true
@ObjectModel.usageType:{
    serviceQuality: #X,
    sizeCategory: #S,
    dataClass: #MIXED
}
@Metadata.allowExtensions: true
define root view entity ZEY_AO_I_U_TRAVEL as select from /dmo/travel as Travel 
association[1] to ZEY_AO_U_AGENCY as _Agency on 
$projection.AgencyId = _Agency.AgencyId
association[1] to ZEY_AO_U_CUSTOMER as _Customer on 
$projection.CustomerId = _Customer.CustomerId
association[1] to I_Currency as _Currency on 
$projection.CurrencyCode = _Currency.Currency
association[1] to /DMO/I_Travel_Status_VH as _TravelStatus on 
$projection.Status = _TravelStatus.TravelStatus
{   
    @ObjectModel.text.element: ['Description']
    key Travel.travel_id as TravelId,
    @ObjectModel.text.element: ['AgencyName']
    Travel.agency_id as AgencyId,
    _Agency.Name as AgencyName,
    @ObjectModel.text.element: ['CustomerName']
    Travel.customer_id as CustomerId,
    _Customer.FirstName as CustomerName,
    Travel.begin_date as BeginDate,
    Travel.end_date as EndDate,
    @Semantics.amount.currencyCode: 'CurrencyCode'
    Travel.booking_fee as BookingFee,
    @Semantics.amount.currencyCode: 'CurrencyCode'
    Travel.total_price as TotalPrice,
    Travel.currency_code as CurrencyCode,
    Travel.description as Description,
    case status
        when 'N' then 3 --green
        when 'B' then 2 --yellow
        when 'X' then 1 -- red
        when 'P' then 3
        else 0 end as Criticality,
    @ObjectModel.text.element: ['StatusText']
    Travel.status as Status,
    _TravelStatus._Text[ Language = 'E' ].Text as StatusText,
    Travel.createdby as Createdby,
    Travel.createdat as Createdat,
    Travel.lastchangedby as Lastchangedby,
    Travel.lastchangedat as Lastchangedat,
    _Agency,
    _Customer,
    _Currency,
    _TravelStatus
}



@Metadata.layer: #CORE
@UI.headerInfo:{ 
    typeName: 'Travel',
    typeNamePlural: 'Travel',
    description: {value: 'TotalPrice' },
    title: {value: 'Description' }
}
@UI.presentationVariant: [{ sortOrder: [{ by: 'AgencyId', direction: #DESC }] }]
@Search.searchable: true
annotate view ZEY_AO_I_U_TRAVEL
    with 
{   
    @UI.facet: [{
                    label: 'General Information',
                    position: 10,
                    id: 'GeneralInfo',
                    type: #COLLECTION
     },{
                    id: 'Travel',
                    purpose: #STANDARD,
                    type: #IDENTIFICATION_REFERENCE,
                    label: 'Travel Details',
                    position: 10,
                    parentId: 'GeneralInfo'
     },{ 
        purpose: #HEADER,
        type: #DATAPOINT_REFERENCE,
        position: 10,
        targetQualifier: 'StatusData'
     },{ 
        purpose: #STANDARD,
        type: #FIELDGROUP_REFERENCE,
        label: 'Pricing Data',
        parentId: 'GeneralInfo',
        position: 20,
        targetQualifier: 'PricingData'
     },{ 
        purpose: #STANDARD,
        type: #FIELDGROUP_REFERENCE,
        label: 'Dates',
        parentId: 'GeneralInfo',
        position: 30,
        targetQualifier: 'DatesData'
     }]
    @UI.selectionField: [{position: 10 }]
    @UI.lineItem: [{position: 10, label: 'Travel ID' }]
    @UI.identification: [{position: 10 }]
    @Search.defaultSearchElement: true
    TravelId;
    @UI.selectionField: [{position: 20 }]
    @UI.lineItem: [{position: 20, label: 'Agency ID' }]
    @UI.identification: [{position: 20 }]
    @Consumption.valueHelpDefinition: [{ entity: { name: 'ZEY_AO_U_AGENCY', element: 'AgencyId' } }]
    @Search.defaultSearchElement: true
    AgencyId;
    @UI.selectionField: [{position: 30 }]
    @UI.lineItem: [{position: 30, label: 'Customer ID' }]
    @UI.identification: [{position: 30 }]
    @Consumption.valueHelpDefinition: [{ entity: { name: 'ZEY_AO_U_CUSTOMER', element: 'CustomerId' } }]
    @Search.defaultSearchElement: true
    CustomerId;
    @UI.lineItem: [{position: 40 }]
    @UI.fieldGroup: [{qualifier: 'DatesData', position: 10 }]
    BeginDate;
    @UI.fieldGroup: [{qualifier: 'DatesData', position: 20 }]
    EndDate;
    @UI.fieldGroup: [{qualifier: 'PricingData', position: 20 }]
    BookingFee;
    @UI.lineItem: [{position: 50 }]
    @UI.fieldGroup: [{qualifier: 'PricingData', position: 10 }]
    TotalPrice;
    @UI.lineItem: [{position: 60 }]
    @UI.fieldGroup: [{qualifier: 'PricingData', position: 30 }]
    CurrencyCode;
//    @UI.lineItem: [{position: 70 }]
    @UI.identification: [{position: 70 }]
    Description;
    @UI.textArrangement: #TEXT_ONLY
    @UI.lineItem: [{position: 80,
        criticality: 'Criticality', criticalityRepresentation: #WITH_ICON,
                                                              importance: #HIGH },
     {  type: #FOR_ACTION, dataAction: 'set_status_booked', label: 'Book Maddi' }]
    @UI.identification: [{position: 80 }]
    @UI.dataPoint: { qualifier: 'StatusData' , title: 'Status', criticality: 'Criticality' }
    Status;
//    Createdby;
//    Createdat;
//    Lastchangedby;
//    Lastchangedat;
    
}



unmanaged implementation in class zbp_ey_ao_i_u_travel unique;
strict ( 2 );

define behavior for ZEY_AO_I_U_TRAVEL alias Travel
lock master
authorization master ( global )
etag master Lastchangedat
{
  create;
  update;
  delete;

  action set_status_booked result[1] $self;

mapping for /dmo/travel control /dmo/s_travel_intx
{
    AgencyId = agency_id;
    BeginDate = begin_date;
    BookingFee = booking_fee;
    CurrencyCode = currency_code;
    CustomerId = customer_id;
    EndDate = end_date;
    Lastchangedat = lastchangedat;
    Description = description;
    Status = status;
    TotalPrice = total_price;
    TravelId = travel_id;
}

}


CLASS lhc_Travel DEFINITION INHERITING FROM cl_abap_behavior_handler.
  PRIVATE SECTION.

    TYPES tt_travel_failed type table for failed ZEY_AO_I_U_TRAVEL.
    TYPES tt_travel_reported type table for REPORTED ZEY_AO_I_U_TRAVEL.


    METHODS get_global_authorizations FOR GLOBAL AUTHORIZATION
      IMPORTING REQUEST requested_authorizations FOR Travel RESULT result.

    METHODS create FOR MODIFY
      IMPORTING entities FOR CREATE Travel.

    METHODS update FOR MODIFY
      IMPORTING entities FOR UPDATE Travel.

    METHODS delete FOR MODIFY
      IMPORTING keys FOR DELETE Travel.

    METHODS read FOR READ
      IMPORTING keys FOR READ Travel RESULT result.

    METHODS lock FOR LOCK
      IMPORTING keys FOR LOCK Travel.
    METHODS set_status_booked FOR MODIFY
      IMPORTING keys FOR ACTION Travel~set_status_booked RESULT result.

*    Map messages from our old code to RAP messages
    METHODS map_messages
    IMPORTING
        cid type string OPTIONAL
        travel_id type /dmo/travel_id OPTIONAL
        messages type /dmo/t_message
    EXPORTING
        failed_added type abap_bool
    changing
        failed type tt_travel_failed
        reported type tt_travel_reported.

ENDCLASS.

CLASS lhc_Travel IMPLEMENTATION.

  METHOD get_global_authorizations.
  ENDMETHOD.

  METHOD create.

    data: messages type /dmo/t_message,
          travel_in type /dmo/travel,
          travel_out type /dmo/travel.

    "Step 1: Loop at all the data come from Fiori App
    LOOP AT entities ASSIGNING FIELD-SYMBOL(<travel_create>).

        "Step 2: Map the data which was received to the input structure
        travel_in = CORRESPONDING #( <travel_create> mapping from entity using control ).

        "Step 3: Imaging in your company you have OLD code - FM, Class, Report..
        append travel_in to zbp_ey_ao_i_u_travel=>mt_create_buffer_2 .

*        /dmo/cl_flight_legacy=>get_instance(  )->create_travel(
*          EXPORTING
*            is_travel             = CORRESPONDING /dmo/s_travel_in( travel_in )
*            iv_numbering_mode = /dmo/if_flight_legacy=>numbering_mode-early
*          IMPORTING
*             es_travel             = travel_out
*             et_messages           = data(lt_messages)
*        ).
*
*        /dmo/cl_flight_legacy=>get_instance(  )->convert_messages(
*          EXPORTING
*            it_messages = lt_messages
*          IMPORTING
*            et_messages = messages
*        ).
*
*        map_messages(
*          EXPORTING
*             cid          = <travel_create>-%cid
*             messages     = messages
*         IMPORTING
*            failed_added = data(failed_added)
*          CHANGING
*            failed       = failed-travel
*            reported     = reported-travel
*        ).
*        if failed_added = abap_false.
*
*            INSERT value #(
*                            %cid = <travel_create>-%cid
*                            travelid = travel_out-travel_id
*             ) into table mapped-travel.
*
*        ENDIF.

    ENDLOOP.

  ENDMETHOD.

  METHOD update.
    DATA: messages TYPE /dmo/t_message,
          travel   TYPE /dmo/travel,
          travelx  TYPE /dmo/s_travel_inx. "refers to x structure (> BAPIs)

    LOOP AT entities ASSIGNING FIELD-SYMBOL(<travel_update>).

      travel = CORRESPONDING #( <travel_update> MAPPING FROM ENTITY ).

      travelx-travel_id = <travel_update>-TravelID.
      travelx-_intx     = CORRESPONDING #( <travel_update> MAPPING FROM ENTITY ).


      call FUNCTION '/DMO/FLIGHT_TRAVEL_UPDATE'
        EXPORTING
          is_travel              = CORRESPONDING /dmo/s_travel_in( travel )
          is_travelx             = travelx
*          it_booking             =
*          it_bookingx            =
*          it_booking_supplement  =
*          it_booking_supplementx =
        IMPORTING
*          es_travel              =
*          et_booking             =
*          et_booking_supplement  =
          et_messages            = messages
        .
*      /dmo/cl_flight_legacy=>get_instance( )->update_travel(
*        EXPORTING
*          is_travel              = CORRESPONDING /dmo/s_travel_in( travel )
*          is_travelx             = travelx
*        IMPORTING
*           et_messages            =  data(lt_messages)
*      ).
*
*      /dmo/cl_flight_legacy=>get_instance( )->convert_messages( EXPORTING it_messages = lt_messages
*                                                        IMPORTING et_messages = messages ).


      map_messages(
          EXPORTING
            cid       = <travel_update>-%cid_ref
            travel_id = <travel_update>-travelid
            messages  = messages
          CHANGING
            failed    = failed-travel
            reported  = reported-travel
        ).

    ENDLOOP.
  ENDMETHOD.

  METHOD delete.
DATA: messages TYPE /dmo/t_message.

    LOOP AT keys ASSIGNING FIELD-SYMBOL(<travel_delete>).

      data lt_messages .

      call FUNCTION '/DMO/FLIGHT_TRAVEL_DELETE'
        EXPORTING
          iv_travel_id = <travel_delete>-travelid
        IMPORTING
          et_messages  = messages
        .

*        /dmo/cl_flight_legacy=>get_instance( )->delete_travel(
*        EXPORTING
*          iv_travel_id = <travel_delete>-travelid
*        IMPORTING
*          et_messages  = data(lt_messages)
*      ).

*     /dmo/cl_flight_legacy=>get_instance( )->convert_messages( EXPORTING it_messages = lt_messages
*                                                        IMPORTING et_messages = messages ).


      map_messages(
          EXPORTING
            cid       = <travel_delete>-%cid_ref
            travel_id = <travel_delete>-travelid
            messages  = messages
          CHANGING
            failed    = failed-travel
            reported  = reported-travel
        ).

    ENDLOOP.
  ENDMETHOD.

  METHOD read.
  DATA: travel_out TYPE /dmo/travel,
          messages   TYPE /dmo/t_message.

    LOOP AT keys ASSIGNING FIELD-SYMBOL(<travel_to_read>) GROUP BY <travel_to_read>-%tky.


        /dmo/cl_flight_legacy=>get_instance( )->get_travel( EXPORTING iv_travel_id          = <travel_to_read>-travelid
                                                                      iv_include_buffer     = ABAP_FALSE
                                                      IMPORTING es_travel             = travel_out
                                                                et_messages           = DATA(lt_messages) ).

        /dmo/cl_flight_legacy=>get_instance( )->convert_messages( EXPORTING it_messages = lt_messages
                                                            IMPORTING et_messages = messages ).

      map_messages(
          EXPORTING
            travel_id        = <travel_to_read>-TravelID
            messages         = messages
          IMPORTING
            failed_added = DATA(failed_added)
          CHANGING
            failed           = failed-travel
            reported         = reported-travel
        ).

      IF failed_added = abap_false.
        INSERT CORRESPONDING #( travel_out MAPPING TO ENTITY ) INTO TABLE result.
      ENDIF.
    ENDLOOP.
  ENDMETHOD.

  METHOD lock.

*    data(lo_lock) = cl_abap_lock_object_factory=>get_instance( iv_name = '/DMO/ETRAVEL' ).
*    loop at keys ASSIGNING FIELD-SYMBOL(<travel>).
*
*        lo_lock->enqueue(
*          it_parameter  = VALUE #( ( name = 'TRAVEL_ID' VALUE = REF #( <travel>-TravelId ) ) )
*        ).
*        CATCH cx_abap_foreign_lock.
*        CATCH cx_abap_lock_failure.


*    ENDLOOP.


  ENDMETHOD.

  METHOD map_messages.

    failed_added = abap_false.

    loop at messages into data(message).
        if message-msgty = 'E' or message-msgty = 'A'.
            append value #( %cid = cid
                            travelid = travel_id
                            %fail-cause = /dmo/cl_travel_auxiliary=>get_cause_from_message(
                                            msgid        = message-msgid
                                            msgno        = message-msgno
*                                            is_dependend = abap_false
                                          )
            ) to failed.

            failed_added = abap_true.
        ENDIF.

        append value #( %msg = new_message(
                                            id = message-msgid
                                            number = message-msgno
                                            v1 = message-msgv1
                                            v2 = message-msgv2
                                            v3 = message-msgv3
                                            v4 = message-msgv4
                                            severity = if_abap_behv_message=>severity-error
                                          )
                        %cid = cid
                        travelid = travel_id
            ) to reported.
    ENDLOOP.



  ENDMETHOD.

  METHOD set_status_booked.

    DATA: messages                 TYPE /dmo/t_message,
          travel_out               TYPE /dmo/travel,
          travel_set_status_booked LIKE LINE OF result.

    CLEAR result.

    LOOP AT keys ASSIGNING FIELD-SYMBOL(<travel_set_status_booked>).

      DATA(travelid) = <travel_set_status_booked>-travelid.


      /dmo/cl_flight_legacy=>get_instance( )->set_status_to_booked( EXPORTING iv_travel_id = travelid
                                                                IMPORTING et_messages  = DATA(lt_messages) ).

      /dmo/cl_flight_legacy=>get_instance( )->convert_messages( EXPORTING it_messages  = lt_messages
                                                            IMPORTING et_messages  = messages ).

      map_messages(
          EXPORTING
            travel_id        = <travel_set_status_booked>-TravelID
            messages         = messages
          IMPORTING
            failed_added = DATA(failed_added)
          CHANGING
            failed           = failed-travel
            reported         = reported-travel
        ).

      IF failed_added = abap_false.

        /dmo/cl_flight_legacy=>get_instance( )->get_travel( EXPORTING iv_travel_id          = travelid
                                                                      iv_include_buffer     = ABAP_FALSE
                                                      IMPORTING es_travel             = travel_out ).

        travel_set_status_booked-travelid        = travelid.
        travel_set_status_booked-%param          = CORRESPONDING #( travel_out MAPPING TO ENTITY ).
        travel_set_status_booked-%param-travelid = travelid.
        APPEND travel_set_status_booked TO result.
      ENDIF.

    ENDLOOP.

  ENDMETHOD.

ENDCLASS.

CLASS lsc_ZEY_AO_I_U_TRAVEL DEFINITION INHERITING FROM cl_abap_behavior_saver.
  PUBLIC SECTION.

  PROTECTED SECTION.

    METHODS finalize REDEFINITION.

    METHODS check_before_save REDEFINITION.

    METHODS save REDEFINITION.

    METHODS cleanup REDEFINITION.

    METHODS cleanup_finalize REDEFINITION.

ENDCLASS.

CLASS lsc_ZEY_AO_I_U_TRAVEL IMPLEMENTATION.

  METHOD finalize.
  ENDMETHOD.

  METHOD check_before_save.
  ENDMETHOD.

  METHOD save.
     INSERT /dmo/travel FROM TABLE @zbp_ey_ao_i_u_travel=>mt_create_buffer_2.
     /dmo/cl_flight_legacy=>get_instance(  )->save(  ).
  ENDMETHOD.

  METHOD cleanup.
    /dmo/cl_flight_legacy=>get_instance(  )->initialize(   ).
  ENDMETHOD.

  METHOD cleanup_finalize.
  ENDMETHOD.

ENDCLASS.


CLASS zey_ao_test_rap_bo DEFINITION
  PUBLIC
  FINAL
  CREATE PUBLIC .

  PUBLIC SECTION.

    INTERFACES if_oo_adt_classrun .
    data lv_type type c value 'A'.

  PROTECTED SECTION.
  PRIVATE SECTION.
ENDCLASS.



CLASS zey_ao_test_rap_bo IMPLEMENTATION.


  METHOD if_oo_adt_classrun~main.
    out->write(
              EXPORTING
                data   = |Execution Started with mode { lv_type }|
*                name   =
*              RECEIVING
*                output =
            ).
    case lv_type.
      when 'R'.
        READ ENTITIES OF ZEY_AO_I_U_TRAVEL
            ENTITY Travel
            ALL FIELDS WITH
            value #( ( TravelId = '858585' ) )
            RESULT data(lt_result)
            failed data(lt_failed)
            reported data(lt_reported).

        if lt_result is not initial.
            out->write(
              EXPORTING
                data   = lt_result
            ).
        else.
            out->write(
              EXPORTING
                data   = lt_failed
            ).
        endif.

      when 'C'.

            data(lv_description) = 'Anubhav is testing RAP BO'.
            data(lv_agency) = '070048'.
            data(lv_my_agency) = '070099'.

            select single customer_id from /dmo/customer into @data(lv_customer_id).

            out->write(
              EXPORTING
                data   = 'Execution Started'
*                name   =
*              RECEIVING
*                output =
            ).

            MODIFY ENTITIES OF ZEY_AO_I_U_TRAVEL
            ENTITY Travel
            CREATE FIELDS ( travelid agencyid customerid begindate enddate description status )
            with value #( ( %cid = 'CID_001'
                            travelid = '959277'
                            agencyid = lv_agency
                            customerid = lv_customer_id
                            begindate = cl_abap_context_info=>get_system_date( )
                            enddate = cl_abap_context_info=>get_system_date( ) + 30
                            description = lv_description
                            status = conv #( /dmo/if_flight_legacy=>travel_status-new )
             ) )
             MAPPED data(lt_mapped)
             failed lt_failed
             reported lt_reported.

             COMMIT ENTITIES.

*             READ ENTITIES OF ZEY_AO_I_U_TRAVEL
*            ENTITY Travel
*            ALL FIELDS WITH
*            value #( ( TravelId = lt_mapped-travel[ 1 ]-travelid ) )
*            RESULT lt_result
*            failed lt_failed
*            reported lt_reported.
*
*            out->write(
*              EXPORTING
*                data   = lt_result
**                name   =
**              RECEIVING
**                output =
*            ).


      when 'U'.
            MODIFY ENTITIES OF ZEY_AO_I_U_TRAVEL
            ENTITY Travel
            UPDATE FIELDS ( agencyid description )
            with value #( (
                            travelid = '959277'
                            agencyid = '070017'
                            description = 'This was gift from EML' )
             )
             failed lt_failed
             reported lt_reported.

             COMMIT ENTITIES.
      when 'D'.
            MODIFY ENTITIES OF ZEY_AO_I_U_TRAVEL
            ENTITY Travel
            DELETE from value #( (
                            travelid = '959277' )
             )
             failed lt_failed
             reported lt_reported.

             COMMIT ENTITIES.
      when 'A'.
            MODIFY ENTITIES OF ZEY_AO_I_U_TRAVEL
            ENTITY Travel
            EXECUTE set_status_booked
            from value #( (
                            travelid = '959277' )
             )
             failed lt_failed
             reported lt_reported.

             COMMIT ENTITIES.
    endcase.


  ENDMETHOD.
ENDCLASS.



www.anubhavtrainings.com
RULE - People are rewarded in public for what they do in private

Step 1: Create BASE CDS Views with Composition for Travel (Root of BO), Booking (Level1 Child), Booking Supplement(Level 2 Child)

1.1 Travel Root Entity

@AccessControl.authorizationCheck: #CHECK
@EndUserText.label: 'Managed scenario Travel CDS - Root of the BO'
define root view entity ZI_LAM_TRAVEL_M_AB as select from /dmo/travel 
composition[1..*] of ZI_LAM_BOOKING_M_AB as _Bookings
association[0..1] to ZI_LAM_AGENCY_U_AB as _Agency on
$projection.AgencyId = _Agency.AgencyId
association[0..1] to ZI_LAM_CUSTOMER_U_AB as _Customer on
$projection.CustomerId = _Customer.CustomerId
association[0..1] to I_Currency as _Currency on
$projection.CurrencyCode = _Currency.Currency
{
   key /dmo/travel.travel_id as TravelId,
   /dmo/travel.agency_id as AgencyId,
   /dmo/travel.customer_id as CustomerId,
   /dmo/travel.begin_date as BeginDate,
   /dmo/travel.end_date as EndDate,
   @Semantics.amount.currencyCode: 'CurrencyCode'
   /dmo/travel.booking_fee as BookingFee,
   @Semantics.amount.currencyCode: 'CurrencyCode'
   /dmo/travel.total_price as TotalPrice,
   /dmo/travel.currency_code as CurrencyCode,
   /dmo/travel.description as Memo,
   /dmo/travel.status as Status,
   case /dmo/travel.status
       when 'N' then 'New'
       when 'B' then 'Booked'
       when 'O' then 'Open'
       when 'P' then 'Planned'
       when 'A' then 'Approved'
       when 'X' then 'Cancelled'
       else 'Undefined'
       end as OverallStatus,
   case /dmo/travel.status
       when 'N' then 2
       when 'B' then 1
       when 'O' then 2
       when 'P' then 2
       when 'A' then 3
       when 'X' then 1
       else 0
       end as StatusCriticality,
   @Semantics.user.createdBy: true
   /dmo/travel.createdby as Createdby,
   @Semantics.systemDateTime.createdAt: true
   /dmo/travel.createdat as Createdat,
   @Semantics.user.lastChangedBy: true
   /dmo/travel.lastchangedby as Lastchangedby,
   @Semantics.systemDateTime.lastChangedAt: true
   /dmo/travel.lastchangedat as Lastchangedat,   
   _Customer,
   _Agency,
   _Currency,
   _Bookings
}


1.2 Booking Level1 Child

@AbapCatalog.viewEnhancementCategory: [#NONE]
@AccessControl.authorizationCheck: #CHECK
@EndUserText.label: 'Booking Scenario'
@Metadata.ignorePropagatedAnnotations: true
@ObjectModel.usageType:{
    serviceQuality: #X,
    sizeCategory: #S,
    dataClass: #MIXED
}
define view entity ZI_LAM_BOOKING_M_AB as select from /dmo/booking as Booking
composition[1..*] of ZI_LAM_BOOK_SUPPL_M_AB as _BookingSuppl
association to parent ZI_LAM_TRAVEL_M_AB as _Travel
on $projection.TravelId = _Travel.TravelId 
association[1..1] to ZI_LAM_CUSTOMER_U_AB as _Customer on 
$projection.CustomerId = _Customer.CustomerId
association[1..1] to /DMO/I_Carrier as _Carrier on
$projection.CarrierId = _Carrier.AirlineID
association[1..1] to /DMO/I_Connection as _Connection on
$projection.CarrierId = _Connection.AirlineID and
$projection.ConnectionId = _Connection.ConnectionID
{
 key travel_id as TravelId,
 key booking_id as BookingId,
 booking_date as BookingDate,
 customer_id as CustomerId,
 carrier_id as CarrierId,
 connection_id as ConnectionId,
 //www.anubhavtrainings.com
 flight_date as FlightDate,
 @Semantics.amount.currencyCode: 'CurrencyCode'
 flight_price as FlightPrice,
 currency_code as CurrencyCode,
 --bring etag from parent
 @UI.hidden: true
 _Travel.Lastchangedat,
 _Customer,
 _Carrier,
 _Connection,
 _Travel,
 _BookingSuppl
}


1.3 Booking Supplement Level3 child

@AbapCatalog.viewEnhancementCategory: [#NONE]
@AccessControl.authorizationCheck: #CHECK
@EndUserText.label: 'Booking Scenario'
@Metadata.ignorePropagatedAnnotations: true
@ObjectModel.usageType:{
    serviceQuality: #X,
    sizeCategory: #S,
    dataClass: #MIXED
}
define view entity ZI_LAM_BOOK_SUPPL_M_AB as select from /dmo/book_suppl as BookingSuppl
association to parent ZI_LAM_BOOKING_M_AB as _Bookings
on $projection.TravelId = _Bookings.TravelId and
   $projection.BookingId = _Bookings.BookingId
association[1] to ZI_LAM_TRAVEL_M_AB as _Travel
on $projection.TravelId = _Travel.TravelId 
{
 key BookingSuppl.travel_id as TravelId,
 key BookingSuppl.booking_id as BookingId,
 key BookingSuppl.booking_supplement_id as BookingSupplementId,
 BookingSuppl.supplement_id as SupplementId,
  //www.anubhavtrainings.com
 @Semantics.amount.currencyCode: 'CurrencyCode'
 BookingSuppl.price as Price,
 BookingSuppl.currency_code as CurrencyCode,
 --bring etag from parent
 @UI.hidden: true
 _Bookings._Travel.Lastchangedat,
 _Bookings,
 _Travel
}

=================================Phase 2=====================================

2. Create Base Behavior Definition for Scenario which includes all 3 entities

managed implementation in class zbp_i_lam_travel_m_ab unique;
with draft;

define behavior for ZI_LAM_TRAVEL_M_AB alias Travel
persistent table /DMO/TRAVEL
draft table zlam_ab_travel_d
lock master
total etag LastChangedAt
early numbering
//authorization master ( global )
etag master Lastchangedat
{
  create;
  update;
  delete;
      // administrative fields: read only
  field ( readonly ) lastchangedat, lastchangedby, createdat, createdby;
  //www.anubhavtrainings.com
  // mandatory fields that are required to create a travel
  field ( mandatory ) agencyid, status, bookingfee, currencycode;

  action createTravelByTemplate result[1] $self;

  field (features : instance) TravelId;
    // dynamic action control
  action  ( features: instance ) acceptTravel result [1] $self;
  action  ( features: instance ) rejectTravel result [1] $self;

  draft determine action prepare{
    validation validateCustomer ;
    validation validateDates;
    validation validateStatus;
  }

  validation validateCustomer on save { field customerid; create; }
  validation validateDates on save { field begindate, enddate; create; }
  validation validateStatus on save { field status; }


  association _Bookings { create; with draft;}

  mapping for /dmo/travel{
    TravelId = travel_id;
    AgencyId = agency_id;
    CustomerId = customer_id;
    BookingFee = booking_fee;
    TotalPrice = total_price;
    BeginDate = begin_date;
    EndDate = end_date;
    Memo = description;
    Status = status;
    Createdat = createdat;
    Createdby = createdby;
    Lastchangedat  = lastchangedat;
    Lastchangedby = lastchangedby;
    CurrencyCode = currency_code;
  }
}

define behavior for ZI_LAM_BOOKING_M_AB alias Booking
persistent table /dmo/booking
draft table zlamab_book_d
lock dependent by _Travel
early numbering
//authorization dependent by _Travel
etag master Lastchangedat
{
  update;
  delete;
  //www.anubhavtrainings.com
      // static field control
  //field ( mandatory ) carrierid, connectionid, flightdate;

  // dynamic field control
  field (features : instance ) bookingid, bookingdate, customerid;

  //in the booking table the system will auto insert travel id from parents
  field ( readonly ) TravelId;

  determination calculateTotalFlightPrice on modify { field flightprice, currencycode; create; }

  association _Travel {with draft;}
  mapping for /dmo/booking{
    TravelId = travel_id;
    BookingId = booking_id;
    BookingDate = booking_date;
    CustomerId = customer_id;
    CarrierId = carrier_id;
    ConnectionId = connection_id;
    FlightDate = flight_date;
    FlightPrice = flight_price;
    CurrencyCode = currency_code;
  }
}

define behavior for ZI_LAM_BOOK_SUPPL_M_AB alias BookingSuppl
persistent table /dmo/book_suppl
draft table zlamab_books_d
lock dependent by _Travel
early numbering
//authorization dependent by _Travel
etag master Lastchangedat
{
  update;
  delete;
  //in the booking table the system will auto insert travel id from parents
  field ( readonly ) TravelId, BookingId;
    //www.anubhavtrainings.com
  association _Bookings {with draft;}
  association _Travel {with draft;}
  mapping for /dmo/book_suppl{
    TravelId = travel_id;
    BookingId = booking_id;
    BookingSupplementId = booking_supplement_id;
    Price = price;
    SupplementId = supplement_id;
    CurrencyCode = currency_code;
  }
}

=================================Phase 3=====================================
3.1 Do not Forget to generate Draft tables using Quick Fix Feature
3.2 Implementation Class Pool for Behavior Action Implementations - zbp_i_lam_travel_m_ab (Local Type Section)

CLASS lhc_Travel DEFINITION INHERITING FROM cl_abap_behavior_handler.
  PRIVATE SECTION.

    METHODS createTravelByTemplate FOR MODIFY
      IMPORTING keys FOR ACTION Travel~createTravelByTemplate RESULT result.
    METHODS get_instance_features FOR INSTANCE FEATURES
      IMPORTING keys REQUEST requested_features FOR Travel RESULT result.

    METHODS acceptTravel FOR MODIFY
      IMPORTING keys FOR ACTION Travel~acceptTravel RESULT result.

    METHODS rejectTravel FOR MODIFY
      IMPORTING keys FOR ACTION Travel~rejectTravel RESULT result.
    METHODS validateCustomer FOR VALIDATE ON SAVE
      IMPORTING keys FOR Travel~validateCustomer.

    METHODS validateDates FOR VALIDATE ON SAVE
      IMPORTING keys FOR Travel~validateDates.

    METHODS validateStatus FOR VALIDATE ON SAVE
      IMPORTING keys FOR Travel~validateStatus.
    METHODS earlynumbering_create FOR NUMBERING
      IMPORTING entities FOR CREATE Travel.

ENDCLASS.

CLASS lhc_Booking DEFINITION INHERITING FROM cl_abap_behavior_handler.
    PRIVATE SECTION.
    METHODS get_instance_features_cb FOR INSTANCE FEATURES
      IMPORTING keys REQUEST requested_features FOR Booking RESULT result.
    METHODS calculatetotalflightprice FOR DETERMINE ON MODIFY
      IMPORTING keys FOR booking~calculatetotalflightprice.
    METHODS earlynumbering_cba_Booking FOR NUMBERING
      IMPORTING entities FOR CREATE Travel\_Bookings.
ENDCLASS.

CLASS lhc_Travel IMPLEMENTATION.

  METHOD createTravelByTemplate.

    "Generate a new travel id based on max available
    SELECT MAX( travel_id ) FROM /dmo/travel INTO @DATA(lv_travel_id). "#EC CI_NOWHERE

    "Extract the data using EML from DB Table
    " www.anubhavtrainings.com
    READ ENTITIES OF ZI_LAM_TRAVEL_M_AB IN LOCAL MODE
      ENTITY travel
         FIELDS ( travelid
                  agencyid
                  customerid
                  bookingfee
                  totalprice
                  currencycode )
           WITH CORRESPONDING #( keys )
         RESULT    DATA(lt_read_result)
         FAILED    failed
         REPORTED  reported.

    DATA(lv_today) = cl_abap_context_info=>get_system_date( ).

    DATA lt_create TYPE TABLE FOR CREATE ZI_LAM_TRAVEL_M_AB\\travel.

    ""Prepare data to be created using RAP to DB Table
    lt_create = VALUE #( FOR row IN  lt_read_result INDEX INTO idx

                             ( %cid = row-travelid
                               travelid      = lv_travel_id + idx
                               agencyid      = row-agencyid
                               customerid    = row-customerid
                               begindate     = lv_today
                               enddate       = lv_today + 30
                               bookingfee    = row-bookingfee
                               totalprice    = row-totalprice
                               currencycode  = row-currencycode
                               memo    = 'Auto-Created by RAP using action'
                               status = 'O' ) ). " Open

    "EML to create new record using BO
    MODIFY ENTITIES OF ZI_LAM_TRAVEL_M_AB IN LOCAL MODE
        ENTITY travel
           CREATE FIELDS (    travelid
                              agencyid
                              customerid
                              begindate
                              enddate
                              bookingfee
                              totalprice
                              currencycode
                              memo
                              status )
           WITH lt_create
         MAPPED   mapped
         FAILED   DATA(failed_modify)
         REPORTED DATA(reported_modify).

    failed-travel   = CORRESPONDING #( BASE ( failed-travel )   failed_modify-travel   MAPPING travelid = %cid ).
    reported-travel = CORRESPONDING #( BASE ( reported-travel ) reported_modify-travel MAPPING travelid = %cid ).


    READ ENTITIES OF ZI_LAM_TRAVEL_M_AB IN LOCAL MODE
      ENTITY travel
        ALL FIELDS WITH
        CORRESPONDING #( mapped-travel )
    RESULT DATA(lt_read_created).

    result = VALUE #( FOR key IN  mapped-travel  INDEX INTO idx
                               ( %cid_ref = keys[ KEY entity %key = key-%cid ]-%cid_ref
                                 %key     = key-%cid
                                 %param-%tky   = key-%tky ) ) .

    result = CORRESPONDING #( result FROM lt_read_created USING KEY entity  %key = %param-%key MAPPING %param = %data EXCEPT * ).


  ENDMETHOD.

  METHOD get_instance_features.
    "Read the status of the record
      READ ENTITIES OF ZI_LAM_TRAVEL_M_AB IN LOCAL MODE
        ENTITY Travel
        FIELDS ( status )
        WITH CORRESPONDING #( keys )
        RESULT DATA(lt_travel_result)
        FAILED failed.
    " www.anubhavtrainings.com
        result = VALUE #( FOR ls_travel IN lt_travel_result
                           ( %tky                   = ls_travel-%tky
                             %field-travelid               = if_abap_behv=>fc-f-read_only
                             %features-%action-rejectTravel = COND #( WHEN ls_travel-status = 'X'
                                                                        THEN if_abap_behv=>fc-o-disabled ELSE if_abap_behv=>fc-o-enabled  )
                             %features-%action-acceptTravel = COND #( WHEN ls_travel-status = 'A'
                                                                        THEN if_abap_behv=>fc-o-disabled ELSE if_abap_behv=>fc-o-enabled  )
                          ) ).
  ENDMETHOD.

  METHOD acceptTravel.
" Modify in local mode
    MODIFY ENTITIES OF ZI_LAM_TRAVEL_M_AB IN LOCAL MODE
        ENTITY Travel
          UPDATE FIELDS (  status )
          WITH VALUE #( FOR key IN keys ( %tky          = key-%tky
                                          status = 'A' ) )
        FAILED failed
        REPORTED reported.

    "Read changed data for action result
    READ ENTITIES OF ZI_LAM_TRAVEL_M_AB IN LOCAL MODE
      ENTITY Travel
        ALL FIELDS WITH
        CORRESPONDING #( keys )
      RESULT DATA(lt_travel).

    result = VALUE #( FOR travel IN lt_travel ( %tky   = travel-%tky
                                                %param = travel ) ).
  ENDMETHOD.

  METHOD rejectTravel.
" Modify in local mode
    MODIFY ENTITIES OF ZI_LAM_TRAVEL_M_AB IN LOCAL MODE
        ENTITY Travel
          UPDATE FIELDS (  status )
          WITH VALUE #( FOR key IN keys ( %tky          = key-%tky
                                          status = 'X' ) )
        FAILED failed
        REPORTED reported.

            "Read changed data for action result
            READ ENTITIES OF ZI_LAM_TRAVEL_M_AB IN LOCAL MODE
              ENTITY Travel
                ALL FIELDS WITH
                CORRESPONDING #( keys )
              RESULT DATA(lt_travel).

            result = VALUE #( FOR travel IN lt_travel ( %tky   = travel-%tky
                                                        %param = travel ) ).
  ENDMETHOD.

  METHOD validateCustomer.

    READ ENTITIES OF ZI_LAM_TRAVEL_M_AB IN LOCAL MODE
        ENTITY Travel
          FIELDS ( customerid )
          WITH CORRESPONDING #( keys )
        RESULT DATA(lt_travel)
        FAILED DATA(lt_failed).

    failed =  CORRESPONDING #( DEEP lt_failed  ).

    DATA lt_customer TYPE SORTED TABLE OF /dmo/customer WITH UNIQUE KEY customer_id.

    " Optimization of DB select: extract distinct non-initial customer IDs
    lt_customer = CORRESPONDING #( lt_travel DISCARDING DUPLICATES MAPPING customer_id = customerid EXCEPT * ).
    DELETE lt_customer WHERE customer_id IS INITIAL.

    IF  lt_customer IS NOT INITIAL.
      " Check if customer ID exists
      SELECT FROM /dmo/customer FIELDS customer_id
                                FOR ALL ENTRIES IN @lt_customer
                                WHERE customer_id = @lt_customer-customer_id
      INTO TABLE @DATA(lt_customer_db).
    ENDIF.

    " Raise message for non existing customer id
    LOOP AT lt_travel INTO DATA(ls_travel).

      APPEND VALUE #(  %tky                 = ls_travel-%tky
                       %state_area          = 'VALIDATE_CUSTOMER' ) TO reported-travel.

      IF ls_travel-customerid IS  INITIAL.
        APPEND VALUE #( %tky = ls_travel-%tky ) TO failed-travel.

        APPEND VALUE #( %tky                = ls_travel-%tky
                        %state_area         = 'VALIDATE_CUSTOMER'
                        %msg                = NEW /dmo/cm_flight_messages(
                                                                textid = /dmo/cm_flight_messages=>enter_customer_id
                                                                severity = if_abap_behv_message=>severity-error )
                        %element-customerid = if_abap_behv=>mk-on ) TO reported-travel.

      ELSEIF ls_travel-customerid IS NOT INITIAL AND NOT line_exists( lt_customer_db[ customer_id = ls_travel-customerid ] ).
        APPEND VALUE #(  %tky = ls_travel-%tky ) TO failed-travel.

        APPEND VALUE #(  %tky                = ls_travel-%tky
                         %state_area         = 'VALIDATE_CUSTOMER'
                         %msg                = NEW /dmo/cm_flight_messages(
                                                                customer_id = ls_travel-CustomerId
                                                                textid = /dmo/cm_flight_messages=>customer_unkown
                                                                severity = if_abap_behv_message=>severity-error )
                         %element-customerid = if_abap_behv=>mk-on ) TO reported-travel.
      ENDIF.
     ENDLOOP.

  ENDMETHOD.

  METHOD validateDates.
  READ ENTITIES OF ZI_LAM_TRAVEL_M_AB IN LOCAL MODE
     ENTITY Travel
       FIELDS (  begindate enddate travelid )
       WITH CORRESPONDING #( keys )
     RESULT DATA(lt_travel)
     FAILED DATA(lt_failed).

    failed =  CORRESPONDING #( DEEP lt_failed  ).

    LOOP AT lt_travel INTO DATA(ls_travel).

      APPEND VALUE #(  %tky               = ls_travel-%tky
                       %state_area          = 'VALIDATE_DATES' ) TO reported-travel.
    " www.anubhavtrainings.com
      IF ls_travel-begindate IS INITIAL.
        APPEND VALUE #( %tky = ls_travel-%tky ) TO failed-travel.

        APPEND VALUE #( %tky               = ls_travel-%tky
                        %state_area        = 'VALIDATE_DATES'
                         %msg                = NEW /dmo/cm_flight_messages(
                                                                textid = /dmo/cm_flight_messages=>enter_begin_date
                                                                severity = if_abap_behv_message=>severity-error )
                        %element-begindate = if_abap_behv=>mk-on ) TO reported-travel.
      ENDIF.
      IF ls_travel-enddate IS INITIAL.
        APPEND VALUE #( %tky = ls_travel-%tky ) TO failed-travel.

        APPEND VALUE #( %tky               = ls_travel-%tky
                        %state_area        = 'VALIDATE_DATES'
                         %msg                = NEW /dmo/cm_flight_messages(
                                                                textid = /dmo/cm_flight_messages=>enter_end_date
                                                                severity = if_abap_behv_message=>severity-error )
                        %element-enddate   = if_abap_behv=>mk-on ) TO reported-travel.
      ENDIF.
      IF ls_travel-enddate < ls_travel-begindate AND ls_travel-begindate IS NOT INITIAL
                                                 AND ls_travel-enddate IS NOT INITIAL.
        APPEND VALUE #( %tky = ls_travel-%tky ) TO failed-travel.

        APPEND VALUE #( %tky               = ls_travel-%tky
                        %state_area        = 'VALIDATE_DATES'
                        %msg               = NEW /dmo/cm_flight_messages(
                                                                textid = /dmo/cm_flight_messages=>begin_date_bef_end_date
                                                                begin_date = ls_travel-begindate
                                                                end_date   = ls_travel-enddate
                                                                severity = if_abap_behv_message=>severity-error )
                        %element-begindate = if_abap_behv=>mk-on
                        %element-enddate   = if_abap_behv=>mk-on ) TO reported-travel.
      ENDIF.
      IF ls_travel-begindate < cl_abap_context_info=>get_system_date( ) AND ls_travel-begindate IS NOT INITIAL.
        APPEND VALUE #( %tky               = ls_travel-%tky ) TO failed-travel.

        APPEND VALUE #( %tky               = ls_travel-%tky
                        %state_area        = 'VALIDATE_DATES'
                         %msg                = NEW /dmo/cm_flight_messages(
                                                                begin_date = ls_travel-begindate
                                                                textid = /dmo/cm_flight_messages=>begin_date_on_or_bef_sysdate
                                                                severity = if_abap_behv_message=>severity-error )
                        %element-begindate = if_abap_behv=>mk-on ) TO reported-travel.
      ENDIF.

    ENDLOOP.
  ENDMETHOD.

  METHOD validateStatus.
  READ ENTITIES OF ZI_LAM_TRAVEL_M_AB IN LOCAL MODE
    ENTITY Travel
    FIELDS (  status )
    WITH CORRESPONDING #( keys )
    RESULT DATA(lt_travel_result)
    FAILED DATA(lt_failed).

        LOOP AT lt_travel_result INTO DATA(ls_travel_result).
          CASE ls_travel_result-status.
            WHEN 'O'.  " Open
            WHEN 'X'.  " Cancelled
            WHEN 'A'.  " Accepted

            WHEN OTHERS.

              APPEND VALUE #( %tky = ls_travel_result-%tky ) TO failed-travel.

              APPEND VALUE #( %tky = ls_travel_result-%tky
                              %msg = new_message_with_text(
                                       severity = if_abap_behv_message=>severity-error
                                       text     = 'Invalid Status'
                                     )
                              %element-status = if_abap_behv=>mk-on ) TO reported-travel.
          ENDCASE.
    " www.anubhavtrainings.com
        ENDLOOP.
  ENDMETHOD.

  METHOD earlynumbering_create.

    " Mapping for already assigned travel IDs (e.g. during draft activation)
     mapped-travel = VALUE #( FOR entity IN entities WHERE ( travelid IS NOT INITIAL )
                                                          ( %cid      = entity-%cid
                                                            %is_draft = entity-%is_draft
                                                            %key      = entity-%key ) ).

    " This should be a number range. But for the demo purpose, avoiding the need to configure this in each and every system, we select the max value ...

    SELECT MAX( travel_id ) FROM /dmo/travel INTO @DATA(max_travel_id).
    SELECT MAX( travelid ) FROM zlam_ab_travel_d INTO @DATA(max_d_travel_id).

    IF max_d_travel_id > max_travel_id.  max_travel_id = max_d_travel_id.  ENDIF.

    " Mapping for newly assigned travel IDs
    mapped-travel = VALUE #( BASE mapped-travel FOR entity IN entities INDEX INTO i
                                                    USING KEY entity
                                                    WHERE ( travelid IS INITIAL )
                                                          ( %cid      = entity-%cid
                                                            %is_draft = entity-%is_draft
                                                            travelid  = max_travel_id + i ) ).

  ENDMETHOD.

ENDCLASS.

CLASS lhc_Booking IMPLEMENTATION.
  METHOD get_instance_features_cb.
    READ ENTITIES OF ZI_LAM_TRAVEL_M_AB IN LOCAL MODE
       ENTITY Booking
         FIELDS ( carrierid )
         WITH CORRESPONDING #( keys )
       RESULT DATA(lt_booking_result)
       FAILED failed.

    " www.anubhavtrainings.com

    result = VALUE #( FOR ls_booking IN lt_booking_result
                       (  %tky                      = ls_booking-%tky
                         %field-bookingid   = if_abap_behv=>fc-f-read_only
                         %field-bookingdate = if_abap_behv=>fc-f-read_only
                         %field-customerid  = COND #( WHEN ls_booking-carrierid = 'AA'
                                                          THEN if_abap_behv=>fc-f-read_only
                                                          ELSE if_abap_behv=>fc-f-unrestricted  )
                      ) ).
  ENDMETHOD.

  METHOD calculateTotalFlightPrice.

    TYPES: BEGIN OF ty_amount_per_currencycode,
             amount        TYPE /dmo/total_price,
             currency_code TYPE /dmo/currency_code,
           END OF ty_amount_per_currencycode.

    DATA: amount_per_currencycode TYPE STANDARD TABLE OF ty_amount_per_currencycode.

    " Read all relevant travel instances.
    READ ENTITIES OF ZI_LAM_TRAVEL_M_AB IN LOCAL MODE
         ENTITY Travel
            FIELDS ( bookingfee currencycode )
            WITH CORRESPONDING #( keys )
         RESULT DATA(lt_travel).


    DELETE lt_travel WHERE currencycode IS INITIAL.

    LOOP AT lt_travel ASSIGNING FIELD-SYMBOL(<fs_travel>).
      " Set the start for the calculation by adding the booking fee.
      amount_per_currencycode = VALUE #( ( amount        = <fs_travel>-bookingfee
                                           currency_code = <fs_travel>-currencycode ) ).

      " Read all associated bookings and add them to the total price.
      READ ENTITIES OF ZI_LAM_TRAVEL_M_AB IN LOCAL MODE
        ENTITY Travel BY \_Bookings
          FIELDS ( flightprice currencycode )
        WITH VALUE #( ( %tky = <fs_travel>-%tky ) )
        RESULT DATA(lt_booking).

      LOOP AT lt_booking INTO DATA(booking) WHERE currencycode IS NOT INITIAL.
        COLLECT VALUE ty_amount_per_currencycode( amount        = booking-flightprice
                                                  currency_code = booking-currencycode ) INTO amount_per_currencycode.
      ENDLOOP.

    " www.anubhavtrainings.com

      CLEAR <fs_travel>-totalprice.
      LOOP AT amount_per_currencycode INTO DATA(single_amount_per_currencycode).
        " If needed do a Currency Conversion
        IF single_amount_per_currencycode-currency_code = <fs_travel>-currencycode.
          <fs_travel>-totalprice += single_amount_per_currencycode-amount.
        ELSE.
          TRY  .
              /dmo/cl_flight_amdp=>convert_currency(
                 EXPORTING
                   iv_amount                   =  single_amount_per_currencycode-amount
                   iv_currency_code_source     =  single_amount_per_currencycode-currency_code
                   iv_currency_code_target     =  <fs_travel>-currencycode
                   iv_exchange_rate_date       =  cl_abap_context_info=>get_system_date( )
                 IMPORTING
                   ev_amount                   = DATA(total_booking_price_per_curr)
                ).
            CATCH cx_amdp_execution_failed.

          ENDTRY.
          <fs_travel>-totalprice += total_booking_price_per_curr.
        ENDIF.
      ENDLOOP.
    ENDLOOP.

    " write back the modified total_price of travels
    MODIFY ENTITIES OF ZI_LAM_TRAVEL_M_AB IN LOCAL MODE
      ENTITY travel
        UPDATE FIELDS ( totalprice )
        WITH CORRESPONDING #( lt_travel ).

  ENDMETHOD.

  METHOD earlynumbering_cba_Booking.
        DATA: max_booking_id TYPE /dmo/booking_id.

    READ ENTITIES OF ZI_LAM_TRAVEL_M_AB IN LOCAL MODE
      ENTITY Travel BY \_Bookings
        FIELDS ( bookingid )
          WITH CORRESPONDING #( entities )
          RESULT DATA(bookings)
          FAILED failed.

    LOOP AT entities INTO DATA(entity).
      CLEAR: max_booking_id.
      LOOP AT bookings INTO DATA(booking) USING KEY draft WHERE %is_draft = entity-%is_draft
                                                          AND   travelid  = entity-Travelid.
        IF booking-Bookingid > max_booking_id.
            max_booking_id = booking-Bookingid.
        ENDIF.
      ENDLOOP.
      " Map bookings that already have a BookingID.
      " www.anubhavtrainings.com
      LOOP AT entity-%target INTO DATA(already_mapped_target) WHERE Bookingid IS NOT INITIAL.
        APPEND CORRESPONDING #( already_mapped_target ) TO mapped-booking.
        IF already_mapped_target-Bookingid > max_booking_id.
            max_booking_id = already_mapped_target-Bookingid.
        ENDIF.
      ENDLOOP.
      " Map bookings with new BookingIDs.
      LOOP AT entity-%target INTO DATA(target) WHERE Bookingid IS INITIAL.
        max_booking_id += 10.
        APPEND CORRESPONDING #( target ) TO mapped-booking ASSIGNING FIELD-SYMBOL(<mapped_booking>).
        <mapped_booking>-Bookingid = max_booking_id.
      ENDLOOP.
    ENDLOOP.
  ENDMETHOD.
ENDCLASS.


=================================Phase 4=====================================
Create Projection CDS Views for Approvar Scenarios - Created on top of Phase 1 Base CDS
4.1 Travel Projection CDS on Root Entity

@AbapCatalog.viewEnhancementCategory: [#NONE]
@AccessControl.authorizationCheck: #CHECK
@EndUserText.label: 'Approver scenario - Travel CDS'
@Metadata.ignorePropagatedAnnotations: true
@ObjectModel.usageType:{
    serviceQuality: #X,
    sizeCategory: #S,
    dataClass: #MIXED
}
@Search.searchable: true
@Metadata.allowExtensions: true
define root view entity ZC_TRAVEL_APPROVER_M_LAMAB as projection on ZI_LAM_TRAVEL_M_AB {
    @Search.defaultSearchElement: true
    key TravelId,
    @Consumption.valueHelpDefinition: [{ entity:{
        name: 'ZLAM_AB_AGENCY_CE',
        element: 'AgencyID'
    } }]
    //@ObjectModel.text.element: ['AgencyName']
    AgencyId,
    //@Semantics.text: true
    // www.anubhavtrainings.com
    //_Agency.Name as AgencyName,
    @Consumption.valueHelpDefinition: [{ entity:{
        name: '/DMO/I_Customer',
        element: 'CustomerID'
    } }]
    @ObjectModel.text.element: ['CustomerName']
    CustomerId,
    @Semantics.text: true
    _Customer.FirstName as CustomerName,
    BeginDate,
    EndDate,
    @Semantics.amount.currencyCode: 'CurrencyCode'
    BookingFee,
    @Semantics.amount.currencyCode: 'CurrencyCode'
    TotalPrice,
    CurrencyCode,
    Memo,
    @ObjectModel.text.element: ['OverallStatus']
    Status,
    @Semantics.text: true
    OverallStatus,
    StatusCriticality,
    Createdby,
    Createdat,
    Lastchangedby,
    Lastchangedat,
    /* Associations */
    _Agency,
    _Bookings : redirected to composition child ZC_BOOKING_APPROVER_M_LAMAB,
    _Currency,
    _Customer
}


4.2 Booking Projection CDS on Root Entity

@AbapCatalog.viewEnhancementCategory: [#NONE]
@AccessControl.authorizationCheck: #CHECK
@EndUserText.label: 'Booking CDS for approver'
@Metadata.ignorePropagatedAnnotations: true
@ObjectModel.usageType:{
    serviceQuality: #X,
    sizeCategory: #S,
    dataClass: #MIXED
}
@Search.searchable: true
@Metadata.allowExtensions: true
define view entity ZC_BOOKING_APPROVER_M_LAMAB as projection on ZI_LAM_BOOKING_M_AB {
    @Search.defaultSearchElement: true
    key TravelId,
    // www.anubhavtrainings.com
    @Search.defaultSearchElement: true
    key BookingId,
    BookingDate,
    @Search.defaultSearchElement: true
    @ObjectModel.text.element: ['CustomerName']
    CustomerId,
    @Semantics.text: true
    _Customer.FirstName as CustomerName,
    @ObjectModel.text.element: ['CarrierName']
    CarrierId,
    _Carrier.Name as CarrierName,
    ConnectionId,
    FlightDate,
    @Semantics.amount.currencyCode: 'CurrencyCode'
    FlightPrice,
    CurrencyCode,
    Lastchangedat,
    /* Associations */
    _Carrier,
    _Connection,
    _Customer,
    _Travel : redirected to parent ZC_TRAVEL_APPROVER_M_LAMAB,
    _BookingSuppl: redirected to composition child ZC_BSUPPL_APPROVER_M_LAMAB
}


4.3 Booking Supplement Projection CDS on Root Entity

@AbapCatalog.viewEnhancementCategory: [#NONE]
@AccessControl.authorizationCheck: #CHECK
@EndUserText.label: 'Approver scenario - Travel CDS'
@Metadata.ignorePropagatedAnnotations: true
@ObjectModel.usageType:{
    serviceQuality: #X,
    sizeCategory: #S,
    dataClass: #MIXED
}
@Search.searchable: true
@Metadata.allowExtensions: true
define view entity ZC_BSUPPL_APPROVER_M_LAMAB as projection on ZI_LAM_BOOK_SUPPL_M_AB {
    key TravelId,
    key BookingId,
    @Search.defaultSearchElement: true    
    key BookingSupplementId,
    SupplementId,
    // www.anubhavtrainings.com
    @Semantics.amount.currencyCode: 'CurrencyCode'
    Price,
    CurrencyCode,
    Lastchangedat,
    /* Associations */
    _Bookings: redirected to parent ZC_BOOKING_APPROVER_M_LAMAB
    
}

=================================Phase 5=====================================
5 Create Behavior Projection for Approver scenario

projection;
//strict; //Comment this line in to enable strict mode. The strict mode is prerequisite to be future proof regarding syntax and to be able to release your BO.
//use draft;

define behavior for ZC_TRAVEL_APPROVER_M_LAMAB alias Approver
{
  use update;
  // www.anubhavtrainings.com
  use action acceptTravel;
  use action rejectTravel;

}


=================================Phase 6=====================================
Create Metadata Extensions for Building Fiori Apps
6.1. Travel Metadata Extension with Booking as Child Table
@Metadata.layer: #CORE
annotate view ZC_TRAVEL_APPROVER_M_LAMAB
    with 
{
    @UI.facet: [{ 
        label: 'General Information',
        id: 'GenInfo',
        purpose: #STANDARD,
        type: #COLLECTION,
        position: 10
    },{ 
        label: 'Basic data',
        id: 'basicData',
        parentId: 'GenInfo',
        type: #FIELDGROUP_REFERENCE,
        purpose: #STANDARD,
        position: 10,
        targetQualifier: 'basicdata'
    },{ 
        label: 'Dates',
        id: 'dates',
        parentId: 'GenInfo',
        type: #FIELDGROUP_REFERENCE,
        purpose: #STANDARD,
        position: 20,
        targetQualifier: 'dates'
    },{ 
        label: 'Price',
        id: 'Price',
        parentId: 'GenInfo',
        type: #FIELDGROUP_REFERENCE,
        purpose: #STANDARD,
        position: 30,
        targetQualifier: 'Price'
    },{ 
        label: 'Admin Data',
        id: 'admindata',
        type: #IDENTIFICATION_REFERENCE,
        purpose: #STANDARD,
        position: 20
    },{ 
        purpose: #STANDARD,
        id: 'Booking',
        type: #LINEITEM_REFERENCE,
        label: 'Bookings',
        position: 40,
        targetElement: '_Bookings'
     }]
    @UI:{ 
         selectionField: [{position: 10 }] ,
         lineItem: [{position: 10 }] ,
         fieldGroup: [{position: 10, qualifier: 'basicData', label: 'Travel ID' }] 
    }
    TravelId;
    @UI:{ 
         selectionField: [{position: 20 }] ,
         lineItem: [{position: 20 }] ,
         fieldGroup: [{position: 20, qualifier: 'basicData', label: 'Agency ID' }] 
    }
    AgencyId;
    @UI:{ 
         selectionField: [{position: 30 }] ,
         lineItem: [{position: 30 }] ,
         fieldGroup: [{position: 30, qualifier: 'basicData', label: 'Customer ID' }] 
    }
    CustomerId;
    @UI:{ 
         lineItem: [{position: 40 }] ,
         fieldGroup: [{position: 10, qualifier: 'dates', label: 'From Date' }] 
    }
    BeginDate;
    @UI:{ 
         fieldGroup: [{position: 20, qualifier: 'dates', label: 'To Date' }] 
    }
    EndDate;
    @UI:{ 
         lineItem: [{position: 50 }] ,
         fieldGroup: [{position: 10, qualifier: 'Price', label: 'Booking fees' }] 
    }
    // www.anubhavtrainings.com
    BookingFee;
    @UI:{ 
         fieldGroup: [{position: 20, qualifier: 'Price', label: 'Total Fees' }] 
    }
    TotalPrice;
    @UI:{ 
         selectionField: [{position: 40 }],
         lineItem: [{position: 60, criticality: 'StatusCriticality' }] ,
         fieldGroup: [{position: 40, qualifier: 'basicData', label: 'Status' }] 
    }
    Status;
    @UI.identification: [{position: 10 }]
    Lastchangedby;
    @UI.identification: [{position: 20 }]
    Lastchangedat;
}

6.2. Booking Metadata Extension with Booking Supplement as Child Table

@Metadata.layer: #CORE
annotate view ZC_BOOKING_APPROVER_M_LAMAB
    with 
{
    @UI.facet: [{ 
        label: 'General Information',
        id: 'GenInfo',
        purpose: #STANDARD,
        type: #COLLECTION,
        position: 10
    },{ 
        label: 'Booking Information',
        id: 'basicData',
        parentId: 'GenInfo',
        type: #FIELDGROUP_REFERENCE,
        purpose: #STANDARD,
        position: 10,
        targetQualifier: 'basicdata'
    },{ 
        label: 'Flight Details',
        id: 'flightdetails',
        parentId: 'GenInfo',
        type: #FIELDGROUP_REFERENCE,
        purpose: #STANDARD,
        position: 20,
        targetQualifier: 'flightdetails'
    },{ 
        label: 'Price',
        id: 'Price',
        parentId: 'GenInfo',
        type: #FIELDGROUP_REFERENCE,
        purpose: #STANDARD,
        position: 30,
        targetQualifier: 'Price'
    },{ 
        purpose: #STANDARD,
        id: 'BookingSuppl',
        type: #LINEITEM_REFERENCE,
        label: 'Booking Supplements',
        position: 20,
        targetElement: '_BookingSuppl'
     }]
    @UI:{ 
         lineItem: [{position: 10 }] ,
         fieldGroup: [{position: 10, qualifier: 'basicData', label: 'Travel ID' }] 
    }
    TravelId;
    @UI:{ 
         lineItem: [{position: 20 }] ,
         fieldGroup: [{position: 20, qualifier: 'basicData', label: 'Booking Id' }] 
    }
    BookingId;
    @UI:{ 
         lineItem: [{position: 30 }] ,
         fieldGroup: [{position: 30, qualifier: 'basicData', label: 'Booking Date' }] 
    }
    BookingDate;
     @UI:{ 
         lineItem: [{position: 40 }] ,
         fieldGroup: [{position: 40, qualifier: 'basicData', label: 'Customer ID' }] 
    }
    // www.anubhavtrainings.com
    CustomerId;
    @UI:{ 
         lineItem: [{position: 50 }] ,
         fieldGroup: [{position: 10, qualifier: 'flightdetails', label: 'Carrier ID' }] 
    }
    // www.anubhavtrainings.com
    CarrierId;
    @UI:{ 
         lineItem: [{position: 60 }] ,
         fieldGroup: [{position: 20, qualifier: 'flightdetails', label: 'Connection ID' }] 
    }
    ConnectionId;
    @UI:{ 
         lineItem: [{position: 70 }] ,
         fieldGroup: [{position: 30, qualifier: 'flightdetails', label: 'Flight Date' }] 
    }
    FlightDate;
    @UI:{ 
         lineItem: [{position: 80 }] ,
         fieldGroup: [{position: 10, qualifier: 'Price', label: 'Flight price' }] 
    }
    FlightPrice;
    @UI:{ 
         fieldGroup: [{position: 20, qualifier: 'Price', label: 'Currency' }] 
    }
    CurrencyCode;
    
}

6.3. Booking Supplement Metadata Extension 

@Metadata.layer: #CORE
annotate view ZC_BSUPPL_APPROVER_M_LAMAB
    with 
{
    @UI.facet: [{ 
        label: 'General Information',
        id: 'GenInfo',
        purpose: #STANDARD,
        type: #COLLECTION,
        position: 10
    },{ 
        label: 'Booking Supplement Information',
        id: 'basicData',
        parentId: 'GenInfo',
        type: #FIELDGROUP_REFERENCE,
        purpose: #STANDARD,
        position: 10,
        targetQualifier: 'basicData'
    }]
    @UI:{ 
         lineItem: [{position: 10 }] ,
         fieldGroup: [{position: 10, qualifier: 'basicData', label: 'Travel ID' }] 
    }
    // www.anubhavtrainings.com
    TravelId;
    @UI:{ 
         lineItem: [{position: 20 }] ,
         fieldGroup: [{position: 20, qualifier: 'basicData', label: 'Booking ID' }] 
    }
    BookingId;
    @UI:{ 
         lineItem: [{position: 30 }] ,
         fieldGroup: [{position: 30, qualifier: 'basicData', label: 'Book Suppl ID' }] 
    }
    BookingSupplementId;
     @UI:{ 
         lineItem: [{position: 40 }] ,
         fieldGroup: [{position: 40, qualifier: 'basicData', label: 'Supplement ID' }] 
    }
    SupplementId;
    @UI:{ 
         lineItem: [{position: 50 }] ,
         fieldGroup: [{position: 50, qualifier: 'basicData', label: 'Price' }] 
    }
    // www.anubhavtrainings.com
    Price;
    @UI:{ 
         lineItem: [{position: 60 }] ,
         fieldGroup: [{position: 60, qualifier: 'basicData', label: 'Currency' }] 
    }
    CurrencyCode;
    
}

=================================Phase 7=====================================
7. Define service definition

@EndUserText.label: 'Approver service definition www.anubhavtrainings.com'
define service ZTRAVEL_APPROVER {
  expose ZC_TRAVEL_APPROVER_M_LAMAB as Travel;
  expose ZC_BOOKING_APPROVER_M_LAMAB as Bookings;
  expose ZC_BSUPPL_APPROVER_M_LAMAB as BookingSuppl;
  expose /DMO/I_Customer as Customer;
  expose /DMO/I_Agency as Agency;
  expose I_Currency as Currency;
}

=================================Phase 8=====================================
8. Create Service Binding
9. Create Fiori App using SAP BAS using BTP Connection
use cf login command in BAS tool Terminal
10. Test The Fiori App and Thanks www.anubhavtrainings.com


=================================Phase 11=====================================
Now we will implement the CURDQ scenario for processor

11. Implement the Travel & Booking Projection for processor

11.1 Travel Processor 

@AbapCatalog.viewEnhancementCategory: [#NONE]
@AccessControl.authorizationCheck: #CHECK
@EndUserText.label: 'Travel projection'
@Metadata.ignorePropagatedAnnotations: true
@ObjectModel.usageType:{
    serviceQuality: #X,
    sizeCategory: #S,
    dataClass: #MIXED
}
@UI.headerInfo:{
    title: { type: #STANDARD, value: 'TravelId' },
    typeName: 'Travel',
    typeNamePlural: 'Travels'
}
@Metadata.allowExtensions: true
//@Search.searchable: true
define root view entity ZC_TRAVEL_PROCESSOR_M_LAMAB as projection on ZI_LAM_TRAVEL_M_AB {
    key TravelId,
    @Consumption.valueHelpDefinition: [{ entity: { name: '/DMO/I_Agency', element: 'AgencyID' } }]
    @ObjectModel.text.element: ['AgencyName']
    AgencyId,
    @Semantics.text: true
    _Agency.Name as AgencyName,
    @Consumption.valueHelpDefinition: [{ entity: { name: '/DMO/I_Customer', element: 'CustomerID' } }]
    @ObjectModel.text.element: ['CustomerName']
    CustomerId,
    @Semantics.text: true
    _Customer.FirstName as CustomerName,
    BeginDate,
    EndDate,
    @Semantics.amount.currencyCode: 'CurrencyCode'
    BookingFee,
    @Semantics.amount.currencyCode: 'CurrencyCode'
    TotalPrice,
    CurrencyCode,
    Memo,
    Status,
    Createdby,
    Createdat,
    Lastchangedby,
    Lastchangedat,
    /* Associations */
    _Agency,
    _Bookings : redirected to composition child ZC_BOOKING_PROCESSOR_M_LAMAB,
    _Currency,
    _Customer
}

11.2 Booking Processor view

@AbapCatalog.viewEnhancementCategory: [#NONE]
@AccessControl.authorizationCheck: #CHECK
@EndUserText.label: 'Booking projection'
@Metadata.ignorePropagatedAnnotations: true
@ObjectModel.usageType:{
    serviceQuality: #X,
    sizeCategory: #S,
    dataClass: #MIXED
}
@Metadata.allowExtensions: true
define view entity ZC_BOOKING_PROCESSOR_M_LAMAB as projection on ZI_LAM_BOOKING_M_AB {
    key TravelId,
    key BookingId,
    BookingDate,
    @Consumption.valueHelpDefinition: [{ entity: { name: '/DMO/I_Customer', element: 'CustomerID' } }]
    @ObjectModel.text.element: ['CustomerName']
    CustomerId,
    @Semantics.text: true
    _Customer.FirstName as CustomerName,
    @Consumption.valueHelpDefinition: [{ entity: { name: '/DMO/I_Carrier', element: 'AirlineID' } }]
    @ObjectModel.text.element: ['CarrierName']
    CarrierId,
    @Semantics.text: true
    _Carrier.Name as CarrierName,
 
@Consumption.valueHelpDefinition: [{ entity: { name: '/DMO/I_Connection', element: 'ConnectionID' },
additionalBinding: [{ localElement: 'FlightDate', element: 'FlightDate' },
{ localElement: 'CarrierID', element: 'AirlineID' },
{ localElement: 'FlightPrice', element: 'Price' },
{ localElement: 'CurrencyCode', element: 'CurrencyCode' }] }]
ConnectionId,
@Consumption.valueHelpDefinition: [{ entity: { name: '/DMO/I_Connection', element: 'FlightDate' },
additionalBinding: [{ localElement: 'ConnectionID', element: 'ConnectionID' },
{ localElement: 'CarrierID', element: 'AirlineID' },
{ localElement: 'FlightPrice', element: 'Price' },
{ localElement: 'CurrencyCode', element: 'CurrencyCode' }] }]
FlightDate,


    @Semantics.amount.currencyCode: 'CurrencyCode'
    FlightPrice,
    CurrencyCode,
    Lastchangedat,
    /* Associations */
    _Carrier,
    _Connection,
    _Customer,
    _Travel:  redirected to parent ZC_TRAVEL_PROCESSOR_M_LAMAB
}

=================================Phase 12=====================================
12. Implement the Behavior Definition projection 

projection;
use draft;
//strict; //Comment this line in to enable strict mode. The strict mode is prerequisite to be future proof regarding syntax and to be able to release your BO.

define behavior for ZC_TRAVEL_PROCESSOR_M_LAMAB //alias <alias_name>
implementation in class zcl_TRAVEL_PROCESSOR
{
  use action createTravelByTemplate;
  use create(augment);
  use update;
  use delete;

  use association _Bookings { create; with draft;}
}

define behavior for ZC_BOOKING_PROCESSOR_M_LAMAB //alias <alias_name>
{
  use update;
  use delete;

  use association _Travel{ with draft; }
}




=================================Phase 13=====================================
13 Service Definition

@EndUserText.label: 'Processor Scenario Service definition'
define service ZTRAVEL_PR_M_LAMAB {
  expose ZC_TRAVEL_PROCESSOR_M_LAMAB as Travel;
  expose ZC_BOOKING_PROCESSOR_M_LAMAB as Booking;
  expose ZI_LAM_CUSTOMER_U_AB as Customer;
  expose ZI_LAM_AGENCY_U_AB as Agency;
  expose /DMO/I_Carrier as Carrier;
  expose /DMO/I_Connection as Connection;
  expose /DMO/I_Flight as Flight;
  expose I_Currency as Currency;
  expose I_Country as Country;
}

14. Create Service implementation and Preview Fiori App For full Transaction capability


Call us on +91-84484 54549
Mail us on contact@anubhavtrainings.com
Website: www.anubhavtrainings.com

Our forum: https://www.anubhavtrainings.com/anubhav-training-forums/anubhav-forum
Linkedin:https://www.linkedin.com/in/anubhav-oberoy-3a216957/
Pinterest: https://in.pinterest.com/anubhavtrainings/
Twitter Page: https://twitter.com/AnubhavOberoy
Facebook : https://www.facebook.com/anubhavtrainings
Instagram : https://www.instagram.com/anubhavtrainings/
Linkedin: https://www.linkedin.com/company/anubhavtrainings/

Feel free to call us on +91 8448454549, Or mail us on contact@anubhavtrainings.com

You can download the ppt of this session from below
https://anubhavtrainings.com/anubhav-learning-series

